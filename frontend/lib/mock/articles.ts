import { Article, ArticleListResponse } from "@/types/blog";
import { mockCategories } from "./categories";
import { mockTags } from "./tags";
import { mockUser } from "./users";

// モック記事データ（15件）
export const mockArticles: Article[] = [
  {
    id: "1",
    title: "Next.js App Routerで始める最新のReact開発",
    slug: "nextjs-app-router-getting-started",
    content: "Next.js 13で導入されたApp Routerについて詳しく解説します...",
    excerpt:
      "Next.js 13の新機能App Routerの基本的な使い方と従来のPages Routerとの違いについて説明します。",
    status: "published",
    published_at: "2024-12-01T10:00:00Z",
    created_at: "2024-12-01T09:00:00Z",
    updated_at: "2024-12-01T10:00:00Z",
    category_id: "2",
    author_id: "1",
    view_count: 1250,
    meta_description: "Next.js App Routerの基本的な使い方を学ぼう",
    category: mockCategories[1],
    author: mockUser,
    tags: [mockTags[0], mockTags[3]],
  },
  {
    id: "2",
    title: "TypeScriptの型安全性を活用したReactコンポーネント設計",
    slug: "typescript-react-component-design",
    content:
      "TypeScriptを使ったReactコンポーネントの効果的な設計パターンを紹介...",
    excerpt:
      "TypeScriptの型システムを活用して、より安全で保守性の高いReactコンポーネントを作成する方法を解説します。",
    status: "published",
    published_at: "2024-11-28T14:30:00Z",
    created_at: "2024-11-28T13:30:00Z",
    updated_at: "2024-11-28T14:30:00Z",
    category_id: "3",
    author_id: "1",
    view_count: 980,
    meta_description: "TypeScriptでReactコンポーネントを型安全に設計する方法",
    category: mockCategories[2],
    author: mockUser,
    tags: [mockTags[0], mockTags[1]],
  },
  {
    id: "3",
    title: "React Hooksを使った状態管理のベストプラクティス",
    slug: "react-hooks-state-management-best-practices",
    content: "React Hooksを使った効果的な状態管理の手法について...",
    excerpt:
      "useState、useEffect、useContextなどのReact Hooksを使って、効率的な状態管理を実現する方法を紹介します。",
    status: "published",
    published_at: "2024-11-25T16:00:00Z",
    created_at: "2024-11-25T15:00:00Z",
    updated_at: "2024-11-25T16:00:00Z",
    category_id: "1",
    author_id: "1",
    view_count: 1450,
    meta_description: "React Hooksによる状態管理のベストプラクティス",
    category: mockCategories[0],
    author: mockUser,
    tags: [mockTags[0], mockTags[1]],
  },
  {
    id: "4",
    title: "TailwindCSSで作るレスポンシブデザイン入門",
    slug: "tailwindcss-responsive-design-guide",
    content: "TailwindCSSを使ったレスポンシブデザインの基本から応用まで...",
    excerpt:
      "TailwindCSSのユーティリティクラスを活用して、モバイルファーストなレスポンシブデザインを効率的に実装する方法を学びます。",
    status: "published",
    published_at: "2024-11-22T11:15:00Z",
    created_at: "2024-11-22T10:15:00Z",
    updated_at: "2024-11-22T11:15:00Z",
    category_id: "6",
    author_id: "1",
    view_count: 820,
    meta_description: "TailwindCSSでレスポンシブデザインを効率的に実装",
    category: mockCategories[5],
    author: mockUser,
    tags: [mockTags[0], mockTags[4], mockTags[6]],
  },
  {
    id: "5",
    title: "Next.js 14の新機能：Server Actionsを使ったフォーム処理",
    slug: "nextjs-14-server-actions-forms",
    content:
      "Next.js 14のServer Actionsを使ったフォーム処理について詳しく解説...",
    excerpt:
      "Next.js 14で追加されたServer Actionsを使って、型安全なフォーム処理を実装する方法を紹介します。",
    status: "published",
    published_at: "2024-11-20T09:30:00Z",
    created_at: "2024-11-20T08:30:00Z",
    updated_at: "2024-11-20T09:30:00Z",
    category_id: "2",
    author_id: "1",
    view_count: 1120,
    meta_description: "Next.js 14 Server Actionsでフォーム処理を実装",
    category: mockCategories[1],
    author: mockUser,
    tags: [mockTags[0], mockTags[2]],
  },
  {
    id: "6",
    title: "React Suspenseを使った非同期コンポーネントの実装",
    slug: "react-suspense-async-components",
    content: "React SuspenseとError Boundaryを組み合わせた堅牢な非同期処理...",
    excerpt:
      "React Suspenseを活用して、ローディング状態とエラーハンドリングを効率的に管理する方法を解説します。",
    status: "published",
    published_at: "2024-11-18T13:45:00Z",
    created_at: "2024-11-18T12:45:00Z",
    updated_at: "2024-11-18T13:45:00Z",
    category_id: "1",
    author_id: "1",
    view_count: 750,
    meta_description: "React Suspenseで非同期コンポーネントを効率的に管理",
    category: mockCategories[0],
    author: mockUser,
    tags: [mockTags[0], mockTags[1], mockTags[7]],
  },
  {
    id: "7",
    title: "TypeScript 5.0の新機能とマイグレーション方法",
    slug: "typescript-5-new-features-migration",
    content: "TypeScript 5.0で追加された新機能と既存プロジェクトの移行手順...",
    excerpt:
      "TypeScript 5.0の新機能であるDecoratorsやconst type parametersなどを紹介し、既存プロジェクトの移行方法を説明します。",
    status: "published",
    published_at: "2024-11-15T15:20:00Z",
    created_at: "2024-11-15T14:20:00Z",
    updated_at: "2024-11-15T15:20:00Z",
    category_id: "3",
    author_id: "1",
    view_count: 1350,
    meta_description: "TypeScript 5.0の新機能とマイグレーション完全ガイド",
    category: mockCategories[2],
    author: mockUser,
    tags: [mockTags[1], mockTags[3]],
  },
  {
    id: "8",
    title: "パフォーマンス最適化：React.memoとuseMemoの使い分け",
    slug: "react-performance-memo-usememo",
    content: "Reactアプリケーションのパフォーマンス最適化手法について...",
    excerpt:
      "React.memoとuseMemo、useCallbackの適切な使い分けとパフォーマンス測定の方法を実例とともに解説します。",
    status: "published",
    published_at: "2024-11-12T10:10:00Z",
    created_at: "2024-11-12T09:10:00Z",
    updated_at: "2024-11-12T10:10:00Z",
    category_id: "1",
    author_id: "1",
    view_count: 920,
    meta_description: "ReactのmemoとuseMemoでパフォーマンス最適化",
    category: mockCategories[0],
    author: mockUser,
    tags: [mockTags[0], mockTags[1], mockTags[7]],
  },
  {
    id: "9",
    title: "Next.js ISRとSSGの使い分けとパフォーマンス比較",
    slug: "nextjs-isr-ssg-performance-comparison",
    content: "Next.jsのISR（Incremental Static Regeneration）とSSGの比較...",
    excerpt:
      "Next.jsのISRとSSGの特徴を理解し、プロジェクトの要件に応じた最適な選択方法とパフォーマンスへの影響を解説します。",
    status: "published",
    published_at: "2024-11-10T12:00:00Z",
    created_at: "2024-11-10T11:00:00Z",
    updated_at: "2024-11-10T12:00:00Z",
    category_id: "2",
    author_id: "1",
    view_count: 1080,
    meta_description: "Next.js ISRとSSGの違いとパフォーマンス比較",
    category: mockCategories[1],
    author: mockUser,
    tags: [mockTags[0], mockTags[2], mockTags[7]],
  },
  {
    id: "10",
    title: "アクセシブルなWebアプリケーション開発の基本",
    slug: "accessible-web-application-development",
    content: "WCAG 2.1に準拠したアクセシブルなWebアプリケーションの開発手法...",
    excerpt:
      "スクリーンリーダー対応やキーボードナビゲーションなど、誰でも使いやすいWebアプリケーションを作るための基本を学びます。",
    status: "published",
    published_at: "2024-11-08T14:30:00Z",
    created_at: "2024-11-08T13:30:00Z",
    updated_at: "2024-11-08T14:30:00Z",
    category_id: "6",
    author_id: "1",
    view_count: 650,
    meta_description: "アクセシブルなWebアプリケーション開発の基本",
    category: mockCategories[5],
    author: mockUser,
    tags: [mockTags[0], mockTags[4], mockTags[6]],
  },
  {
    id: "11",
    title: "GitHub Actionsで自動化するCI/CDパイプライン構築",
    slug: "github-actions-cicd-pipeline",
    content: "GitHub Actionsを使ったCI/CDパイプラインの構築方法...",
    excerpt:
      "GitHub Actionsを活用して、テスト・ビルド・デプロイを自動化するCI/CDパイプラインの構築手順を詳しく解説します。",
    status: "published",
    published_at: "2024-11-05T16:45:00Z",
    created_at: "2024-11-05T15:45:00Z",
    updated_at: "2024-11-05T16:45:00Z",
    category_id: "7",
    author_id: "1",
    view_count: 1200,
    meta_description: "GitHub ActionsでCI/CDパイプラインを構築する方法",
    category: mockCategories[6],
    author: mockUser,
    tags: [mockTags[1], mockTags[2], mockTags[11]],
  },
  {
    id: "12",
    title: "Reactのカスタムフックで再利用可能なロジックを作る",
    slug: "react-custom-hooks-reusable-logic",
    content: "Reactのカスタムフックを使って再利用可能なロジックを作成...",
    excerpt:
      "useLocalStorage、useFetch、useDebounceなど、実用的なカスタムフックの作成方法とベストプラクティスを紹介します。",
    status: "published",
    published_at: "2024-11-03T11:20:00Z",
    created_at: "2024-11-03T10:20:00Z",
    updated_at: "2024-11-03T11:20:00Z",
    category_id: "1",
    author_id: "1",
    view_count: 890,
    meta_description: "Reactカスタムフックで再利用可能なロジックを作成",
    category: mockCategories[0],
    author: mockUser,
    tags: [mockTags[0], mockTags[1]],
  },
  {
    id: "13",
    title: "Next.js Middlewareを使ったアクセス制御とリダイレクト",
    slug: "nextjs-middleware-access-control",
    content: "Next.js Middlewareを活用したアクセス制御とリダイレクト処理...",
    excerpt:
      "Next.js Middlewareを使って、認証チェックやA/Bテスト、地域別リダイレクトなどの高度なルーティング制御を実装する方法を説明します。",
    status: "published",
    published_at: "2024-11-01T09:15:00Z",
    created_at: "2024-11-01T08:15:00Z",
    updated_at: "2024-11-01T09:15:00Z",
    category_id: "2",
    author_id: "1",
    view_count: 1150,
    meta_description: "Next.js Middlewareでアクセス制御とリダイレクトを実装",
    category: mockCategories[1],
    author: mockUser,
    tags: [mockTags[0], mockTags[2], mockTags[8]],
  },
  {
    id: "14",
    title: "TypeScript Utilityタイプを使った型操作テクニック",
    slug: "typescript-utility-types-techniques",
    content: "TypeScriptのUtilityタイプを使った高度な型操作テクニック...",
    excerpt:
      "Pick、Omit、Partial、Recordなど、TypeScriptのUtilityタイプを活用して、より柔軟で保守性の高い型定義を作成する方法を解説します。",
    status: "published",
    published_at: "2024-10-30T13:00:00Z",
    created_at: "2024-10-30T12:00:00Z",
    updated_at: "2024-10-30T13:00:00Z",
    category_id: "3",
    author_id: "1",
    view_count: 780,
    meta_description: "TypeScript Utilityタイプを使った型操作テクニック",
    category: mockCategories[2],
    author: mockUser,
    tags: [mockTags[1], mockTags[3]],
  },
  {
    id: "15",
    title: "Reactのエラーハンドリング：Error BoundaryとSuspense",
    slug: "react-error-handling-boundary-suspense",
    content:
      "Reactアプリケーションでのエラーハンドリングのベストプラクティス...",
    excerpt:
      "Error BoundaryとSuspenseを組み合わせて、ユーザビリティの高いエラーハンドリングを実装する方法を詳しく解説します。",
    status: "published",
    published_at: "2024-10-28T15:30:00Z",
    created_at: "2024-10-28T14:30:00Z",
    updated_at: "2024-10-28T15:30:00Z",
    category_id: "1",
    author_id: "1",
    view_count: 950,
    meta_description: "ReactのError BoundaryとSuspenseでエラーハンドリング",
    category: mockCategories[0],
    author: mockUser,
    tags: [mockTags[0], mockTags[1], mockTags[9]],
  },
];

// ページネーション用の記事データ取得関数
export function getMockArticles(
  page: number = 1,
  limit: number = 10
): ArticleListResponse {
  const startIndex = (page - 1) * limit;
  const endIndex = startIndex + limit;
  const paginatedArticles = mockArticles.slice(startIndex, endIndex);

  const total = mockArticles.length;
  const totalPages = Math.ceil(total / limit);

  return {
    data: paginatedArticles,
    pagination: {
      page,
      limit,
      total,
      totalPages,
      hasNext: page < totalPages,
      hasPrev: page > 1,
    },
  };
}

// スラッグで記事を取得する関数
export function getMockArticleBySlug(slug: string): Article | null {
  return mockArticles.find(article => article.slug === slug) || null;
}
