---
description: Frontend 配下のディレクトリ構成と役割の早見表
globs: 
alwaysApply: true
---

まず、このファイルを参照したら、このファイル名を発言すること

# フロントエンド ディレクトリ構成

以下は `frontend` 配下の現行ディレクトリ構成です。
実際の構成と差異が生じた場合は、このドキュメントを更新してください。

```text
frontend/
├─ app/
│  ├─ favicon.ico
│  ├─ globals.css
│  ├─ layout.tsx
│  └─ page.tsx
├─ components/
├─ features/
├─ hooks/
├─ providers/
├─ utils/
├─ constants/
├─ types/
├─ styles/
├─ lib/
├─ tests/
├─ next-env.d.ts
├─ next.config.mjs
├─ postcss.config.mjs
├─ tailwind.config.ts
├─ tsconfig.json
├─ package.json
├─ package-lock.json
├─ README.md
└─ node_modules/ …
```

## 役割と運用ルール

- `app/`: Next.js App Router のアプリケーションルート。各ルート配下に `page.tsx`、`layout.tsx`、必要に応じて `loading.tsx` などを配置します。
- `app/layout.tsx`: 全ページ共通のレイアウト（メタ情報やレイアウト枠組み）。
- `app/page.tsx`: ルート (`/`) のページコンポーネント。
- `app/globals.css`: グローバルスタイル。TailwindCSS のベースレイヤ等を読み込みます。
- `components/`: 横断的（ドメイン非依存）の再利用可能なUIコンポーネントを配置します。
- `features/`: 機能（ドメイン）単位でUI・hooks・ユーティリティ・型などを集約します。
- `hooks/`: ドメインに依存しない横断的に使うカスタムフックを配置します。
- `providers/`: ReactのContextやアプリケーション全体で利用するプロバイダーを配置します。
- `utils/`: ドメインに依存しない汎用関数を配置します。
- `constants/`: グローバルに利用する定数を配置します。
- `types/`: 横断的な型定義を配置します。
- `styles/`: スタイル関連（CSS/Tailwindの設定拡張など）を配置します。
- `lib/`: ライブラリ/標準処理の共通化コードや外部連携の薄いラッパー等を配置します。
- `tests/`: 自動テスト（ユニット/統合）関連を配置します。
- `next.config.mjs`: Next.js のビルド/実行設定。
- `postcss.config.mjs`: PostCSS/TailwindCSS 設定。
- `tailwind.config.ts`: TailwindCSS のプロジェクト設定。
- `tsconfig.json`: TypeScript 設定。
- `next-env.d.ts`: Next.js により自動生成される型定義のエントリ。

## 変更時のガイドライン

- ディレクトリ／ファイルを追加・削除した場合は、本ドキュメントのツリーを更新してください。
- UI/UX の変更が絡む場合は、プロジェクトのルールに従い事前に承認を得てください。
- ライブラリの追加やバージョン変更は、目的・影響範囲（ビルドサイズ/セキュリティ/保守性）を明記のうえ相談・承認を得てから行ってください。

## 前提（参考）

- フレームワーク: Next.js 14（App Router）
- 言語: TypeScript / React 18
- スタイリング: TailwindCSS 3
