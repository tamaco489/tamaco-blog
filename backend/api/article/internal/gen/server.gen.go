// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 記事一覧取得
	// (GET /v1/articles)
	GetArticles(c *gin.Context, params GetArticlesParams)
	// 記事作成
	// (POST /v1/articles)
	CreateArticle(c *gin.Context)
	// 月別アーカイブ取得
	// (GET /v1/articles/archive/{year}/{month})
	GetArticlesByMonth(c *gin.Context, year YearParam, month MonthParam, params GetArticlesByMonthParams)
	// 人気記事一覧取得
	// (GET /v1/articles/popular)
	GetPopularArticles(c *gin.Context, params GetPopularArticlesParams)
	// 最新記事一覧取得
	// (GET /v1/articles/recent)
	GetRecentArticles(c *gin.Context, params GetRecentArticlesParams)
	// 記事削除
	// (DELETE /v1/articles/{article_id})
	DeleteArticleById(c *gin.Context, articleId string)
	// 記事詳細取得
	// (GET /v1/articles/{article_id})
	GetArticleById(c *gin.Context, articleId string)
	// 記事更新
	// (PUT /v1/articles/{article_id})
	UpdateArticleById(c *gin.Context, articleId string)
	// 記事公開
	// (PATCH /v1/articles/{article_id}/publish)
	PublishArticleById(c *gin.Context, articleId string)
	// 閲覧数更新
	// (PATCH /v1/articles/{article_id}/views)
	IncrementArticleViewCount(c *gin.Context, articleId string)
	// カテゴリ一覧取得
	// (GET /v1/categories)
	GetCategories(c *gin.Context)
	// カテゴリ作成
	// (POST /v1/categories)
	CreateCategory(c *gin.Context)
	// カテゴリ削除
	// (DELETE /v1/categories/{category_id})
	DeleteCategoryById(c *gin.Context, categoryId string)
	// カテゴリ詳細取得
	// (GET /v1/categories/{category_id})
	GetCategoryById(c *gin.Context, categoryId string)
	// カテゴリ更新
	// (PUT /v1/categories/{category_id})
	UpdateCategoryById(c *gin.Context, categoryId string)
	// カテゴリ別記事一覧取得
	// (GET /v1/categories/{category_id}/articles)
	GetArticlesByCategoryId(c *gin.Context, categoryId string, params GetArticlesByCategoryIdParams)
	// ヘルスチェックAPI
	// (GET /v1/health)
	Healthcheck(c *gin.Context)
	// 記事検索
	// (GET /v1/search)
	SearchArticles(c *gin.Context, params SearchArticlesParams)
	// タグ一覧取得
	// (GET /v1/tags)
	GetTags(c *gin.Context)
	// タグ作成
	// (POST /v1/tags)
	CreateTag(c *gin.Context)
	// タグ削除
	// (DELETE /v1/tags/{tag_id})
	DeleteTagById(c *gin.Context, tagId string)
	// タグ詳細取得
	// (GET /v1/tags/{tag_id})
	GetTagById(c *gin.Context, tagId string)
	// タグ更新
	// (PUT /v1/tags/{tag_id})
	UpdateTagById(c *gin.Context, tagId string)
	// タグ別記事一覧取得
	// (GET /v1/tags/{tag_id}/articles)
	GetArticlesByTagId(c *gin.Context, tagId string, params GetArticlesByTagIdParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", c.Request.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticles(c, params)
}

// CreateArticle operation middleware
func (siw *ServerInterfaceWrapper) CreateArticle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArticle(c)
}

// GetArticlesByMonth operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesByMonth(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year YearParam

	err = runtime.BindStyledParameter("simple", false, "year", c.Param("year"), &year)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "month" -------------
	var month MonthParam

	err = runtime.BindStyledParameter("simple", false, "month", c.Param("month"), &month)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter month: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesByMonthParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticlesByMonth(c, year, month, params)
}

// GetPopularArticles operation middleware
func (siw *ServerInterfaceWrapper) GetPopularArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPopularArticlesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPopularArticles(c, params)
}

// GetRecentArticles operation middleware
func (siw *ServerInterfaceWrapper) GetRecentArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecentArticlesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecentArticles(c, params)
}

// DeleteArticleById operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleById(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteArticleById(c, articleId)
}

// GetArticleById operation middleware
func (siw *ServerInterfaceWrapper) GetArticleById(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticleById(c, articleId)
}

// UpdateArticleById operation middleware
func (siw *ServerInterfaceWrapper) UpdateArticleById(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateArticleById(c, articleId)
}

// PublishArticleById operation middleware
func (siw *ServerInterfaceWrapper) PublishArticleById(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PublishArticleById(c, articleId)
}

// IncrementArticleViewCount operation middleware
func (siw *ServerInterfaceWrapper) IncrementArticleViewCount(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IncrementArticleViewCount(c, articleId)
}

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategories(c)
}

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCategory(c)
}

// DeleteCategoryById operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategoryById(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCategoryById(c, categoryId)
}

// GetCategoryById operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryById(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategoryById(c, categoryId)
}

// UpdateCategoryById operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategoryById(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCategoryById(c, categoryId)
}

// GetArticlesByCategoryId operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesByCategoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesByCategoryIdParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticlesByCategoryId(c, categoryId, params)
}

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Healthcheck(c)
}

// SearchArticles operation middleware
func (siw *ServerInterfaceWrapper) SearchArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchArticlesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", c.Request.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchArticles(c, params)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTags(c)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTag(c)
}

// DeleteTagById operation middleware
func (siw *ServerInterfaceWrapper) DeleteTagById(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTagById(c, tagId)
}

// GetTagById operation middleware
func (siw *ServerInterfaceWrapper) GetTagById(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTagById(c, tagId)
}

// UpdateTagById operation middleware
func (siw *ServerInterfaceWrapper) UpdateTagById(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTagById(c, tagId)
}

// GetArticlesByTagId operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesByTagId(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesByTagIdParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticlesByTagId(c, tagId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/articles", wrapper.GetArticles)
	router.POST(options.BaseURL+"/v1/articles", wrapper.CreateArticle)
	router.GET(options.BaseURL+"/v1/articles/archive/:year/:month", wrapper.GetArticlesByMonth)
	router.GET(options.BaseURL+"/v1/articles/popular", wrapper.GetPopularArticles)
	router.GET(options.BaseURL+"/v1/articles/recent", wrapper.GetRecentArticles)
	router.DELETE(options.BaseURL+"/v1/articles/:article_id", wrapper.DeleteArticleById)
	router.GET(options.BaseURL+"/v1/articles/:article_id", wrapper.GetArticleById)
	router.PUT(options.BaseURL+"/v1/articles/:article_id", wrapper.UpdateArticleById)
	router.PATCH(options.BaseURL+"/v1/articles/:article_id/publish", wrapper.PublishArticleById)
	router.PATCH(options.BaseURL+"/v1/articles/:article_id/views", wrapper.IncrementArticleViewCount)
	router.GET(options.BaseURL+"/v1/categories", wrapper.GetCategories)
	router.POST(options.BaseURL+"/v1/categories", wrapper.CreateCategory)
	router.DELETE(options.BaseURL+"/v1/categories/:category_id", wrapper.DeleteCategoryById)
	router.GET(options.BaseURL+"/v1/categories/:category_id", wrapper.GetCategoryById)
	router.PUT(options.BaseURL+"/v1/categories/:category_id", wrapper.UpdateCategoryById)
	router.GET(options.BaseURL+"/v1/categories/:category_id/articles", wrapper.GetArticlesByCategoryId)
	router.GET(options.BaseURL+"/v1/health", wrapper.Healthcheck)
	router.GET(options.BaseURL+"/v1/search", wrapper.SearchArticles)
	router.GET(options.BaseURL+"/v1/tags", wrapper.GetTags)
	router.POST(options.BaseURL+"/v1/tags", wrapper.CreateTag)
	router.DELETE(options.BaseURL+"/v1/tags/:tag_id", wrapper.DeleteTagById)
	router.GET(options.BaseURL+"/v1/tags/:tag_id", wrapper.GetTagById)
	router.PUT(options.BaseURL+"/v1/tags/:tag_id", wrapper.UpdateTagById)
	router.GET(options.BaseURL+"/v1/tags/:tag_id/articles", wrapper.GetArticlesByTagId)
}

type GetArticlesRequestObject struct {
	Params GetArticlesParams
}

type GetArticlesResponseObject interface {
	VisitGetArticlesResponse(w http.ResponseWriter) error
}

type GetArticles200JSONResponse ArticleList

func (response GetArticles200JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticles400JSONResponse BadRequest

func (response GetArticles400JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArticles500JSONResponse InternalServerError

func (response GetArticles500JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleRequestObject struct {
	Body *CreateArticleJSONRequestBody
}

type CreateArticleResponseObject interface {
	VisitCreateArticleResponse(w http.ResponseWriter) error
}

type CreateArticle201JSONResponse Article

func (response CreateArticle201JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle400JSONResponse BadRequest

func (response CreateArticle400JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle401JSONResponse Unauthorized

func (response CreateArticle401JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle409JSONResponse AlreadyExists

func (response CreateArticle409JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle500JSONResponse InternalServerError

func (response CreateArticle500JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByMonthRequestObject struct {
	Year   YearParam  `json:"year"`
	Month  MonthParam `json:"month"`
	Params GetArticlesByMonthParams
}

type GetArticlesByMonthResponseObject interface {
	VisitGetArticlesByMonthResponse(w http.ResponseWriter) error
}

type GetArticlesByMonth200JSONResponse ArticleList

func (response GetArticlesByMonth200JSONResponse) VisitGetArticlesByMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByMonth400JSONResponse BadRequest

func (response GetArticlesByMonth400JSONResponse) VisitGetArticlesByMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByMonth500JSONResponse InternalServerError

func (response GetArticlesByMonth500JSONResponse) VisitGetArticlesByMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPopularArticlesRequestObject struct {
	Params GetPopularArticlesParams
}

type GetPopularArticlesResponseObject interface {
	VisitGetPopularArticlesResponse(w http.ResponseWriter) error
}

type GetPopularArticles200JSONResponse ArticleList

func (response GetPopularArticles200JSONResponse) VisitGetPopularArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPopularArticles400JSONResponse BadRequest

func (response GetPopularArticles400JSONResponse) VisitGetPopularArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPopularArticles500JSONResponse InternalServerError

func (response GetPopularArticles500JSONResponse) VisitGetPopularArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentArticlesRequestObject struct {
	Params GetRecentArticlesParams
}

type GetRecentArticlesResponseObject interface {
	VisitGetRecentArticlesResponse(w http.ResponseWriter) error
}

type GetRecentArticles200JSONResponse ArticleList

func (response GetRecentArticles200JSONResponse) VisitGetRecentArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentArticles400JSONResponse BadRequest

func (response GetRecentArticles400JSONResponse) VisitGetRecentArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentArticles500JSONResponse InternalServerError

func (response GetRecentArticles500JSONResponse) VisitGetRecentArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleByIdRequestObject struct {
	ArticleId string `json:"article_id"`
}

type DeleteArticleByIdResponseObject interface {
	VisitDeleteArticleByIdResponse(w http.ResponseWriter) error
}

type DeleteArticleById204Response struct {
}

func (response DeleteArticleById204Response) VisitDeleteArticleByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteArticleById401JSONResponse Unauthorized

func (response DeleteArticleById401JSONResponse) VisitDeleteArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleById404JSONResponse NotFound

func (response DeleteArticleById404JSONResponse) VisitDeleteArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleById500JSONResponse InternalServerError

func (response DeleteArticleById500JSONResponse) VisitDeleteArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleByIdRequestObject struct {
	ArticleId string `json:"article_id"`
}

type GetArticleByIdResponseObject interface {
	VisitGetArticleByIdResponse(w http.ResponseWriter) error
}

type GetArticleById200JSONResponse Article

func (response GetArticleById200JSONResponse) VisitGetArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleById404JSONResponse NotFound

func (response GetArticleById404JSONResponse) VisitGetArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleById500JSONResponse InternalServerError

func (response GetArticleById500JSONResponse) VisitGetArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByIdRequestObject struct {
	ArticleId string `json:"article_id"`
	Body      *UpdateArticleByIdJSONRequestBody
}

type UpdateArticleByIdResponseObject interface {
	VisitUpdateArticleByIdResponse(w http.ResponseWriter) error
}

type UpdateArticleById200JSONResponse Article

func (response UpdateArticleById200JSONResponse) VisitUpdateArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleById400JSONResponse BadRequest

func (response UpdateArticleById400JSONResponse) VisitUpdateArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleById401JSONResponse Unauthorized

func (response UpdateArticleById401JSONResponse) VisitUpdateArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleById404JSONResponse NotFound

func (response UpdateArticleById404JSONResponse) VisitUpdateArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleById409JSONResponse AlreadyExists

func (response UpdateArticleById409JSONResponse) VisitUpdateArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleById500JSONResponse InternalServerError

func (response UpdateArticleById500JSONResponse) VisitUpdateArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleByIdRequestObject struct {
	ArticleId string `json:"article_id"`
}

type PublishArticleByIdResponseObject interface {
	VisitPublishArticleByIdResponse(w http.ResponseWriter) error
}

type PublishArticleById200JSONResponse Article

func (response PublishArticleById200JSONResponse) VisitPublishArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleById401JSONResponse Unauthorized

func (response PublishArticleById401JSONResponse) VisitPublishArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleById404JSONResponse NotFound

func (response PublishArticleById404JSONResponse) VisitPublishArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleById500JSONResponse InternalServerError

func (response PublishArticleById500JSONResponse) VisitPublishArticleByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IncrementArticleViewCountRequestObject struct {
	ArticleId string `json:"article_id"`
}

type IncrementArticleViewCountResponseObject interface {
	VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error
}

type IncrementArticleViewCount200JSONResponse struct {
	// ViewCount 更新後の閲覧数
	ViewCount *int `json:"view_count,omitempty"`
}

func (response IncrementArticleViewCount200JSONResponse) VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IncrementArticleViewCount404JSONResponse NotFound

func (response IncrementArticleViewCount404JSONResponse) VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type IncrementArticleViewCount500JSONResponse InternalServerError

func (response IncrementArticleViewCount500JSONResponse) VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoriesRequestObject struct {
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter) error
}

type GetCategories200JSONResponse CategoryList

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategories500JSONResponse InternalServerError

func (response GetCategories500JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategoryRequestObject struct {
	Body *CreateCategoryJSONRequestBody
}

type CreateCategoryResponseObject interface {
	VisitCreateCategoryResponse(w http.ResponseWriter) error
}

type CreateCategory201JSONResponse Category

func (response CreateCategory201JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory400JSONResponse BadRequest

func (response CreateCategory400JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory401JSONResponse Unauthorized

func (response CreateCategory401JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory409JSONResponse AlreadyExists

func (response CreateCategory409JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory500JSONResponse InternalServerError

func (response CreateCategory500JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryByIdRequestObject struct {
	CategoryId string `json:"category_id"`
}

type DeleteCategoryByIdResponseObject interface {
	VisitDeleteCategoryByIdResponse(w http.ResponseWriter) error
}

type DeleteCategoryById204Response struct {
}

func (response DeleteCategoryById204Response) VisitDeleteCategoryByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategoryById401JSONResponse Unauthorized

func (response DeleteCategoryById401JSONResponse) VisitDeleteCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryById404JSONResponse NotFound

func (response DeleteCategoryById404JSONResponse) VisitDeleteCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryById500JSONResponse InternalServerError

func (response DeleteCategoryById500JSONResponse) VisitDeleteCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryByIdRequestObject struct {
	CategoryId string `json:"category_id"`
}

type GetCategoryByIdResponseObject interface {
	VisitGetCategoryByIdResponse(w http.ResponseWriter) error
}

type GetCategoryById200JSONResponse Category

func (response GetCategoryById200JSONResponse) VisitGetCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryById404JSONResponse NotFound

func (response GetCategoryById404JSONResponse) VisitGetCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryById500JSONResponse InternalServerError

func (response GetCategoryById500JSONResponse) VisitGetCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByIdRequestObject struct {
	CategoryId string `json:"category_id"`
	Body       *UpdateCategoryByIdJSONRequestBody
}

type UpdateCategoryByIdResponseObject interface {
	VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error
}

type UpdateCategoryById200JSONResponse Category

func (response UpdateCategoryById200JSONResponse) VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryById400JSONResponse BadRequest

func (response UpdateCategoryById400JSONResponse) VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryById401JSONResponse Unauthorized

func (response UpdateCategoryById401JSONResponse) VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryById404JSONResponse NotFound

func (response UpdateCategoryById404JSONResponse) VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryById409JSONResponse AlreadyExists

func (response UpdateCategoryById409JSONResponse) VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryById500JSONResponse InternalServerError

func (response UpdateCategoryById500JSONResponse) VisitUpdateCategoryByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByCategoryIdRequestObject struct {
	CategoryId string `json:"category_id"`
	Params     GetArticlesByCategoryIdParams
}

type GetArticlesByCategoryIdResponseObject interface {
	VisitGetArticlesByCategoryIdResponse(w http.ResponseWriter) error
}

type GetArticlesByCategoryId200JSONResponse ArticleList

func (response GetArticlesByCategoryId200JSONResponse) VisitGetArticlesByCategoryIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByCategoryId404JSONResponse NotFound

func (response GetArticlesByCategoryId404JSONResponse) VisitGetArticlesByCategoryIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByCategoryId500JSONResponse InternalServerError

func (response GetArticlesByCategoryId500JSONResponse) VisitGetArticlesByCategoryIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HealthcheckRequestObject struct {
}

type HealthcheckResponseObject interface {
	VisitHealthcheckResponse(w http.ResponseWriter) error
}

type Healthcheck200JSONResponse HealthCheck

func (response Healthcheck200JSONResponse) VisitHealthcheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchArticlesRequestObject struct {
	Params SearchArticlesParams
}

type SearchArticlesResponseObject interface {
	VisitSearchArticlesResponse(w http.ResponseWriter) error
}

type SearchArticles200JSONResponse ArticleList

func (response SearchArticles200JSONResponse) VisitSearchArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchArticles400JSONResponse BadRequest

func (response SearchArticles400JSONResponse) VisitSearchArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchArticles500JSONResponse InternalServerError

func (response SearchArticles500JSONResponse) VisitSearchArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse TagList

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags500JSONResponse InternalServerError

func (response GetTags500JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagRequestObject struct {
	Body *CreateTagJSONRequestBody
}

type CreateTagResponseObject interface {
	VisitCreateTagResponse(w http.ResponseWriter) error
}

type CreateTag201JSONResponse Tag

func (response CreateTag201JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag400JSONResponse BadRequest

func (response CreateTag400JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag401JSONResponse Unauthorized

func (response CreateTag401JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag409JSONResponse AlreadyExists

func (response CreateTag409JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag500JSONResponse InternalServerError

func (response CreateTag500JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagByIdRequestObject struct {
	TagId string `json:"tag_id"`
}

type DeleteTagByIdResponseObject interface {
	VisitDeleteTagByIdResponse(w http.ResponseWriter) error
}

type DeleteTagById204Response struct {
}

func (response DeleteTagById204Response) VisitDeleteTagByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTagById401JSONResponse Unauthorized

func (response DeleteTagById401JSONResponse) VisitDeleteTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagById404JSONResponse NotFound

func (response DeleteTagById404JSONResponse) VisitDeleteTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagById500JSONResponse InternalServerError

func (response DeleteTagById500JSONResponse) VisitDeleteTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagByIdRequestObject struct {
	TagId string `json:"tag_id"`
}

type GetTagByIdResponseObject interface {
	VisitGetTagByIdResponse(w http.ResponseWriter) error
}

type GetTagById200JSONResponse Tag

func (response GetTagById200JSONResponse) VisitGetTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagById404JSONResponse NotFound

func (response GetTagById404JSONResponse) VisitGetTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTagById500JSONResponse InternalServerError

func (response GetTagById500JSONResponse) VisitGetTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByIdRequestObject struct {
	TagId string `json:"tag_id"`
	Body  *UpdateTagByIdJSONRequestBody
}

type UpdateTagByIdResponseObject interface {
	VisitUpdateTagByIdResponse(w http.ResponseWriter) error
}

type UpdateTagById200JSONResponse Tag

func (response UpdateTagById200JSONResponse) VisitUpdateTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagById400JSONResponse BadRequest

func (response UpdateTagById400JSONResponse) VisitUpdateTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagById401JSONResponse Unauthorized

func (response UpdateTagById401JSONResponse) VisitUpdateTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagById404JSONResponse NotFound

func (response UpdateTagById404JSONResponse) VisitUpdateTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagById409JSONResponse AlreadyExists

func (response UpdateTagById409JSONResponse) VisitUpdateTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagById500JSONResponse InternalServerError

func (response UpdateTagById500JSONResponse) VisitUpdateTagByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByTagIdRequestObject struct {
	TagId  string `json:"tag_id"`
	Params GetArticlesByTagIdParams
}

type GetArticlesByTagIdResponseObject interface {
	VisitGetArticlesByTagIdResponse(w http.ResponseWriter) error
}

type GetArticlesByTagId200JSONResponse ArticleList

func (response GetArticlesByTagId200JSONResponse) VisitGetArticlesByTagIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByTagId404JSONResponse NotFound

func (response GetArticlesByTagId404JSONResponse) VisitGetArticlesByTagIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByTagId500JSONResponse InternalServerError

func (response GetArticlesByTagId500JSONResponse) VisitGetArticlesByTagIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 記事一覧取得
	// (GET /v1/articles)
	GetArticles(ctx *gin.Context, request GetArticlesRequestObject) (GetArticlesResponseObject, error)
	// 記事作成
	// (POST /v1/articles)
	CreateArticle(ctx *gin.Context, request CreateArticleRequestObject) (CreateArticleResponseObject, error)
	// 月別アーカイブ取得
	// (GET /v1/articles/archive/{year}/{month})
	GetArticlesByMonth(ctx *gin.Context, request GetArticlesByMonthRequestObject) (GetArticlesByMonthResponseObject, error)
	// 人気記事一覧取得
	// (GET /v1/articles/popular)
	GetPopularArticles(ctx *gin.Context, request GetPopularArticlesRequestObject) (GetPopularArticlesResponseObject, error)
	// 最新記事一覧取得
	// (GET /v1/articles/recent)
	GetRecentArticles(ctx *gin.Context, request GetRecentArticlesRequestObject) (GetRecentArticlesResponseObject, error)
	// 記事削除
	// (DELETE /v1/articles/{article_id})
	DeleteArticleById(ctx *gin.Context, request DeleteArticleByIdRequestObject) (DeleteArticleByIdResponseObject, error)
	// 記事詳細取得
	// (GET /v1/articles/{article_id})
	GetArticleById(ctx *gin.Context, request GetArticleByIdRequestObject) (GetArticleByIdResponseObject, error)
	// 記事更新
	// (PUT /v1/articles/{article_id})
	UpdateArticleById(ctx *gin.Context, request UpdateArticleByIdRequestObject) (UpdateArticleByIdResponseObject, error)
	// 記事公開
	// (PATCH /v1/articles/{article_id}/publish)
	PublishArticleById(ctx *gin.Context, request PublishArticleByIdRequestObject) (PublishArticleByIdResponseObject, error)
	// 閲覧数更新
	// (PATCH /v1/articles/{article_id}/views)
	IncrementArticleViewCount(ctx *gin.Context, request IncrementArticleViewCountRequestObject) (IncrementArticleViewCountResponseObject, error)
	// カテゴリ一覧取得
	// (GET /v1/categories)
	GetCategories(ctx *gin.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)
	// カテゴリ作成
	// (POST /v1/categories)
	CreateCategory(ctx *gin.Context, request CreateCategoryRequestObject) (CreateCategoryResponseObject, error)
	// カテゴリ削除
	// (DELETE /v1/categories/{category_id})
	DeleteCategoryById(ctx *gin.Context, request DeleteCategoryByIdRequestObject) (DeleteCategoryByIdResponseObject, error)
	// カテゴリ詳細取得
	// (GET /v1/categories/{category_id})
	GetCategoryById(ctx *gin.Context, request GetCategoryByIdRequestObject) (GetCategoryByIdResponseObject, error)
	// カテゴリ更新
	// (PUT /v1/categories/{category_id})
	UpdateCategoryById(ctx *gin.Context, request UpdateCategoryByIdRequestObject) (UpdateCategoryByIdResponseObject, error)
	// カテゴリ別記事一覧取得
	// (GET /v1/categories/{category_id}/articles)
	GetArticlesByCategoryId(ctx *gin.Context, request GetArticlesByCategoryIdRequestObject) (GetArticlesByCategoryIdResponseObject, error)
	// ヘルスチェックAPI
	// (GET /v1/health)
	Healthcheck(ctx *gin.Context, request HealthcheckRequestObject) (HealthcheckResponseObject, error)
	// 記事検索
	// (GET /v1/search)
	SearchArticles(ctx *gin.Context, request SearchArticlesRequestObject) (SearchArticlesResponseObject, error)
	// タグ一覧取得
	// (GET /v1/tags)
	GetTags(ctx *gin.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// タグ作成
	// (POST /v1/tags)
	CreateTag(ctx *gin.Context, request CreateTagRequestObject) (CreateTagResponseObject, error)
	// タグ削除
	// (DELETE /v1/tags/{tag_id})
	DeleteTagById(ctx *gin.Context, request DeleteTagByIdRequestObject) (DeleteTagByIdResponseObject, error)
	// タグ詳細取得
	// (GET /v1/tags/{tag_id})
	GetTagById(ctx *gin.Context, request GetTagByIdRequestObject) (GetTagByIdResponseObject, error)
	// タグ更新
	// (PUT /v1/tags/{tag_id})
	UpdateTagById(ctx *gin.Context, request UpdateTagByIdRequestObject) (UpdateTagByIdResponseObject, error)
	// タグ別記事一覧取得
	// (GET /v1/tags/{tag_id}/articles)
	GetArticlesByTagId(ctx *gin.Context, request GetArticlesByTagIdRequestObject) (GetArticlesByTagIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetArticles operation middleware
func (sh *strictHandler) GetArticles(ctx *gin.Context, params GetArticlesParams) {
	var request GetArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticles(ctx, request.(GetArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesResponseObject); ok {
		if err := validResponse.VisitGetArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArticle operation middleware
func (sh *strictHandler) CreateArticle(ctx *gin.Context) {
	var request CreateArticleRequestObject

	var body CreateArticleJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticle(ctx, request.(CreateArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateArticleResponseObject); ok {
		if err := validResponse.VisitCreateArticleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesByMonth operation middleware
func (sh *strictHandler) GetArticlesByMonth(ctx *gin.Context, year YearParam, month MonthParam, params GetArticlesByMonthParams) {
	var request GetArticlesByMonthRequestObject

	request.Year = year
	request.Month = month
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesByMonth(ctx, request.(GetArticlesByMonthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesByMonth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesByMonthResponseObject); ok {
		if err := validResponse.VisitGetArticlesByMonthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPopularArticles operation middleware
func (sh *strictHandler) GetPopularArticles(ctx *gin.Context, params GetPopularArticlesParams) {
	var request GetPopularArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPopularArticles(ctx, request.(GetPopularArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPopularArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPopularArticlesResponseObject); ok {
		if err := validResponse.VisitGetPopularArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecentArticles operation middleware
func (sh *strictHandler) GetRecentArticles(ctx *gin.Context, params GetRecentArticlesParams) {
	var request GetRecentArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecentArticles(ctx, request.(GetRecentArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecentArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecentArticlesResponseObject); ok {
		if err := validResponse.VisitGetRecentArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArticleById operation middleware
func (sh *strictHandler) DeleteArticleById(ctx *gin.Context, articleId string) {
	var request DeleteArticleByIdRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticleById(ctx, request.(DeleteArticleByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticleById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteArticleByIdResponseObject); ok {
		if err := validResponse.VisitDeleteArticleByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticleById operation middleware
func (sh *strictHandler) GetArticleById(ctx *gin.Context, articleId string) {
	var request GetArticleByIdRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticleById(ctx, request.(GetArticleByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticleById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticleByIdResponseObject); ok {
		if err := validResponse.VisitGetArticleByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateArticleById operation middleware
func (sh *strictHandler) UpdateArticleById(ctx *gin.Context, articleId string) {
	var request UpdateArticleByIdRequestObject

	request.ArticleId = articleId

	var body UpdateArticleByIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateArticleById(ctx, request.(UpdateArticleByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateArticleById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateArticleByIdResponseObject); ok {
		if err := validResponse.VisitUpdateArticleByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishArticleById operation middleware
func (sh *strictHandler) PublishArticleById(ctx *gin.Context, articleId string) {
	var request PublishArticleByIdRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PublishArticleById(ctx, request.(PublishArticleByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishArticleById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PublishArticleByIdResponseObject); ok {
		if err := validResponse.VisitPublishArticleByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// IncrementArticleViewCount operation middleware
func (sh *strictHandler) IncrementArticleViewCount(ctx *gin.Context, articleId string) {
	var request IncrementArticleViewCountRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IncrementArticleViewCount(ctx, request.(IncrementArticleViewCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IncrementArticleViewCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(IncrementArticleViewCountResponseObject); ok {
		if err := validResponse.VisitIncrementArticleViewCountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(ctx *gin.Context) {
	var request GetCategoriesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx, request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		if err := validResponse.VisitGetCategoriesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCategory operation middleware
func (sh *strictHandler) CreateCategory(ctx *gin.Context) {
	var request CreateCategoryRequestObject

	var body CreateCategoryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCategory(ctx, request.(CreateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCategoryResponseObject); ok {
		if err := validResponse.VisitCreateCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCategoryById operation middleware
func (sh *strictHandler) DeleteCategoryById(ctx *gin.Context, categoryId string) {
	var request DeleteCategoryByIdRequestObject

	request.CategoryId = categoryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategoryById(ctx, request.(DeleteCategoryByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategoryById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCategoryByIdResponseObject); ok {
		if err := validResponse.VisitDeleteCategoryByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategoryById operation middleware
func (sh *strictHandler) GetCategoryById(ctx *gin.Context, categoryId string) {
	var request GetCategoryByIdRequestObject

	request.CategoryId = categoryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryById(ctx, request.(GetCategoryByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCategoryByIdResponseObject); ok {
		if err := validResponse.VisitGetCategoryByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCategoryById operation middleware
func (sh *strictHandler) UpdateCategoryById(ctx *gin.Context, categoryId string) {
	var request UpdateCategoryByIdRequestObject

	request.CategoryId = categoryId

	var body UpdateCategoryByIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCategoryById(ctx, request.(UpdateCategoryByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCategoryById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCategoryByIdResponseObject); ok {
		if err := validResponse.VisitUpdateCategoryByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesByCategoryId operation middleware
func (sh *strictHandler) GetArticlesByCategoryId(ctx *gin.Context, categoryId string, params GetArticlesByCategoryIdParams) {
	var request GetArticlesByCategoryIdRequestObject

	request.CategoryId = categoryId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesByCategoryId(ctx, request.(GetArticlesByCategoryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesByCategoryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesByCategoryIdResponseObject); ok {
		if err := validResponse.VisitGetArticlesByCategoryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Healthcheck operation middleware
func (sh *strictHandler) Healthcheck(ctx *gin.Context) {
	var request HealthcheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Healthcheck(ctx, request.(HealthcheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthcheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthcheckResponseObject); ok {
		if err := validResponse.VisitHealthcheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchArticles operation middleware
func (sh *strictHandler) SearchArticles(ctx *gin.Context, params SearchArticlesParams) {
	var request SearchArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchArticles(ctx, request.(SearchArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchArticlesResponseObject); ok {
		if err := validResponse.VisitSearchArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(ctx *gin.Context) {
	var request GetTagsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx, request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		if err := validResponse.VisitGetTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTag operation middleware
func (sh *strictHandler) CreateTag(ctx *gin.Context) {
	var request CreateTagRequestObject

	var body CreateTagJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTag(ctx, request.(CreateTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTagResponseObject); ok {
		if err := validResponse.VisitCreateTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTagById operation middleware
func (sh *strictHandler) DeleteTagById(ctx *gin.Context, tagId string) {
	var request DeleteTagByIdRequestObject

	request.TagId = tagId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTagById(ctx, request.(DeleteTagByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTagById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTagByIdResponseObject); ok {
		if err := validResponse.VisitDeleteTagByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagById operation middleware
func (sh *strictHandler) GetTagById(ctx *gin.Context, tagId string) {
	var request GetTagByIdRequestObject

	request.TagId = tagId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagById(ctx, request.(GetTagByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagByIdResponseObject); ok {
		if err := validResponse.VisitGetTagByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTagById operation middleware
func (sh *strictHandler) UpdateTagById(ctx *gin.Context, tagId string) {
	var request UpdateTagByIdRequestObject

	request.TagId = tagId

	var body UpdateTagByIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTagById(ctx, request.(UpdateTagByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTagById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTagByIdResponseObject); ok {
		if err := validResponse.VisitUpdateTagByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesByTagId operation middleware
func (sh *strictHandler) GetArticlesByTagId(ctx *gin.Context, tagId string, params GetArticlesByTagIdParams) {
	var request GetArticlesByTagIdRequestObject

	request.TagId = tagId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesByTagId(ctx, request.(GetArticlesByTagIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesByTagId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesByTagIdResponseObject); ok {
		if err := validResponse.VisitGetArticlesByTagIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
