// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 記事一覧取得
	// (GET /v1/articles)
	GetArticles(c *gin.Context, params GetArticlesParams)
	// 記事作成
	// (POST /v1/articles)
	CreateArticle(c *gin.Context)
	// 月別アーカイブ取得
	// (GET /v1/articles/archive/{year}/{month})
	GetArticlesByMonth(c *gin.Context, year YearParam, month MonthParam, params GetArticlesByMonthParams)
	// 人気記事一覧取得
	// (GET /v1/articles/popular)
	GetPopularArticles(c *gin.Context, params GetPopularArticlesParams)
	// 最新記事一覧取得
	// (GET /v1/articles/recent)
	GetRecentArticles(c *gin.Context, params GetRecentArticlesParams)
	// 記事削除
	// (DELETE /v1/articles/{article_id})
	DeleteArticleByID(c *gin.Context, articleId string)
	// 記事詳細取得
	// (GET /v1/articles/{article_id})
	GetArticleByID(c *gin.Context, articleId string)
	// 記事更新
	// (PUT /v1/articles/{article_id})
	UpdateArticleByID(c *gin.Context, articleId string)
	// 記事公開
	// (PATCH /v1/articles/{article_id}/publish)
	PublishArticleByID(c *gin.Context, articleId string)
	// 閲覧数更新
	// (PATCH /v1/articles/{article_id}/views)
	IncrementArticleViewCount(c *gin.Context, articleId string)
	// カテゴリ一覧取得
	// (GET /v1/categories)
	GetCategories(c *gin.Context)
	// カテゴリ作成
	// (POST /v1/categories)
	CreateCategory(c *gin.Context)
	// カテゴリ削除
	// (DELETE /v1/categories/{category_id})
	DeleteCategoryByID(c *gin.Context, categoryId string)
	// カテゴリ詳細取得
	// (GET /v1/categories/{category_id})
	GetCategoryByID(c *gin.Context, categoryId string)
	// カテゴリ更新
	// (PUT /v1/categories/{category_id})
	UpdateCategoryByID(c *gin.Context, categoryId string)
	// カテゴリ別記事一覧取得
	// (GET /v1/categories/{category_id}/articles)
	GetArticlesByCategoryID(c *gin.Context, categoryId string, params GetArticlesByCategoryIDParams)
	// ヘルスチェックAPI
	// (GET /v1/health)
	Healthcheck(c *gin.Context)
	// 記事検索
	// (GET /v1/search)
	SearchArticles(c *gin.Context, params SearchArticlesParams)
	// タグ一覧取得
	// (GET /v1/tags)
	GetTags(c *gin.Context)
	// タグ作成
	// (POST /v1/tags)
	CreateTag(c *gin.Context)
	// タグ削除
	// (DELETE /v1/tags/{tag_id})
	DeleteTagByID(c *gin.Context, tagId string)
	// タグ詳細取得
	// (GET /v1/tags/{tag_id})
	GetTagByID(c *gin.Context, tagId string)
	// タグ更新
	// (PUT /v1/tags/{tag_id})
	UpdateTagByID(c *gin.Context, tagId string)
	// タグ別記事一覧取得
	// (GET /v1/tags/{tag_id}/articles)
	GetArticlesByTagID(c *gin.Context, tagId string, params GetArticlesByTagIDParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", c.Request.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticles(c, params)
}

// CreateArticle operation middleware
func (siw *ServerInterfaceWrapper) CreateArticle(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArticle(c)
}

// GetArticlesByMonth operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesByMonth(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year YearParam

	err = runtime.BindStyledParameter("simple", false, "year", c.Param("year"), &year)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "month" -------------
	var month MonthParam

	err = runtime.BindStyledParameter("simple", false, "month", c.Param("month"), &month)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter month: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesByMonthParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticlesByMonth(c, year, month, params)
}

// GetPopularArticles operation middleware
func (siw *ServerInterfaceWrapper) GetPopularArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPopularArticlesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPopularArticles(c, params)
}

// GetRecentArticles operation middleware
func (siw *ServerInterfaceWrapper) GetRecentArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecentArticlesParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRecentArticles(c, params)
}

// DeleteArticleByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteArticleByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteArticleByID(c, articleId)
}

// GetArticleByID operation middleware
func (siw *ServerInterfaceWrapper) GetArticleByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticleByID(c, articleId)
}

// UpdateArticleByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateArticleByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateArticleByID(c, articleId)
}

// PublishArticleByID operation middleware
func (siw *ServerInterfaceWrapper) PublishArticleByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PublishArticleByID(c, articleId)
}

// IncrementArticleViewCount operation middleware
func (siw *ServerInterfaceWrapper) IncrementArticleViewCount(c *gin.Context) {

	var err error

	// ------------- Path parameter "article_id" -------------
	var articleId string

	err = runtime.BindStyledParameter("simple", false, "article_id", c.Param("article_id"), &articleId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter article_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IncrementArticleViewCount(c, articleId)
}

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategories(c)
}

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCategory(c)
}

// DeleteCategoryByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategoryByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCategoryByID(c, categoryId)
}

// GetCategoryByID operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategoryByID(c, categoryId)
}

// UpdateCategoryByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategoryByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCategoryByID(c, categoryId)
}

// GetArticlesByCategoryID operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesByCategoryID(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesByCategoryIDParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticlesByCategoryID(c, categoryId, params)
}

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Healthcheck(c)
}

// SearchArticles operation middleware
func (siw *ServerInterfaceWrapper) SearchArticles(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchArticlesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", c.Request.URL.Query(), &params.Category)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", c.Request.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchArticles(c, params)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTags(c)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTag(c)
}

// DeleteTagByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTagByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTagByID(c, tagId)
}

// GetTagByID operation middleware
func (siw *ServerInterfaceWrapper) GetTagByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTagByID(c, tagId)
}

// UpdateTagByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateTagByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTagByID(c, tagId)
}

// GetArticlesByTagID operation middleware
func (siw *ServerInterfaceWrapper) GetArticlesByTagID(c *gin.Context) {

	var err error

	// ------------- Path parameter "tag_id" -------------
	var tagId string

	err = runtime.BindStyledParameter("simple", false, "tag_id", c.Param("tag_id"), &tagId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag_id: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesByTagIDParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArticlesByTagID(c, tagId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/articles", wrapper.GetArticles)
	router.POST(options.BaseURL+"/v1/articles", wrapper.CreateArticle)
	router.GET(options.BaseURL+"/v1/articles/archive/:year/:month", wrapper.GetArticlesByMonth)
	router.GET(options.BaseURL+"/v1/articles/popular", wrapper.GetPopularArticles)
	router.GET(options.BaseURL+"/v1/articles/recent", wrapper.GetRecentArticles)
	router.DELETE(options.BaseURL+"/v1/articles/:article_id", wrapper.DeleteArticleByID)
	router.GET(options.BaseURL+"/v1/articles/:article_id", wrapper.GetArticleByID)
	router.PUT(options.BaseURL+"/v1/articles/:article_id", wrapper.UpdateArticleByID)
	router.PATCH(options.BaseURL+"/v1/articles/:article_id/publish", wrapper.PublishArticleByID)
	router.PATCH(options.BaseURL+"/v1/articles/:article_id/views", wrapper.IncrementArticleViewCount)
	router.GET(options.BaseURL+"/v1/categories", wrapper.GetCategories)
	router.POST(options.BaseURL+"/v1/categories", wrapper.CreateCategory)
	router.DELETE(options.BaseURL+"/v1/categories/:category_id", wrapper.DeleteCategoryByID)
	router.GET(options.BaseURL+"/v1/categories/:category_id", wrapper.GetCategoryByID)
	router.PUT(options.BaseURL+"/v1/categories/:category_id", wrapper.UpdateCategoryByID)
	router.GET(options.BaseURL+"/v1/categories/:category_id/articles", wrapper.GetArticlesByCategoryID)
	router.GET(options.BaseURL+"/v1/health", wrapper.Healthcheck)
	router.GET(options.BaseURL+"/v1/search", wrapper.SearchArticles)
	router.GET(options.BaseURL+"/v1/tags", wrapper.GetTags)
	router.POST(options.BaseURL+"/v1/tags", wrapper.CreateTag)
	router.DELETE(options.BaseURL+"/v1/tags/:tag_id", wrapper.DeleteTagByID)
	router.GET(options.BaseURL+"/v1/tags/:tag_id", wrapper.GetTagByID)
	router.PUT(options.BaseURL+"/v1/tags/:tag_id", wrapper.UpdateTagByID)
	router.GET(options.BaseURL+"/v1/tags/:tag_id/articles", wrapper.GetArticlesByTagID)
}

type GetArticlesRequestObject struct {
	Params GetArticlesParams
}

type GetArticlesResponseObject interface {
	VisitGetArticlesResponse(w http.ResponseWriter) error
}

type GetArticles200JSONResponse ArticleList

func (response GetArticles200JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticles400JSONResponse BadRequest

func (response GetArticles400JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArticles500JSONResponse InternalServerError

func (response GetArticles500JSONResponse) VisitGetArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticleRequestObject struct {
	Body *CreateArticleJSONRequestBody
}

type CreateArticleResponseObject interface {
	VisitCreateArticleResponse(w http.ResponseWriter) error
}

type CreateArticle201JSONResponse Article

func (response CreateArticle201JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle400JSONResponse BadRequest

func (response CreateArticle400JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle401JSONResponse Unauthorized

func (response CreateArticle401JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle409JSONResponse AlreadyExists

func (response CreateArticle409JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateArticle500JSONResponse InternalServerError

func (response CreateArticle500JSONResponse) VisitCreateArticleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByMonthRequestObject struct {
	Year   YearParam  `json:"year"`
	Month  MonthParam `json:"month"`
	Params GetArticlesByMonthParams
}

type GetArticlesByMonthResponseObject interface {
	VisitGetArticlesByMonthResponse(w http.ResponseWriter) error
}

type GetArticlesByMonth200JSONResponse ArticleList

func (response GetArticlesByMonth200JSONResponse) VisitGetArticlesByMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByMonth400JSONResponse BadRequest

func (response GetArticlesByMonth400JSONResponse) VisitGetArticlesByMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByMonth500JSONResponse InternalServerError

func (response GetArticlesByMonth500JSONResponse) VisitGetArticlesByMonthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPopularArticlesRequestObject struct {
	Params GetPopularArticlesParams
}

type GetPopularArticlesResponseObject interface {
	VisitGetPopularArticlesResponse(w http.ResponseWriter) error
}

type GetPopularArticles200JSONResponse ArticleList

func (response GetPopularArticles200JSONResponse) VisitGetPopularArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPopularArticles400JSONResponse BadRequest

func (response GetPopularArticles400JSONResponse) VisitGetPopularArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPopularArticles500JSONResponse InternalServerError

func (response GetPopularArticles500JSONResponse) VisitGetPopularArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentArticlesRequestObject struct {
	Params GetRecentArticlesParams
}

type GetRecentArticlesResponseObject interface {
	VisitGetRecentArticlesResponse(w http.ResponseWriter) error
}

type GetRecentArticles200JSONResponse ArticleList

func (response GetRecentArticles200JSONResponse) VisitGetRecentArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentArticles400JSONResponse BadRequest

func (response GetRecentArticles400JSONResponse) VisitGetRecentArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRecentArticles500JSONResponse InternalServerError

func (response GetRecentArticles500JSONResponse) VisitGetRecentArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleByIDRequestObject struct {
	ArticleId string `json:"article_id"`
}

type DeleteArticleByIDResponseObject interface {
	VisitDeleteArticleByIDResponse(w http.ResponseWriter) error
}

type DeleteArticleByID204Response struct {
}

func (response DeleteArticleByID204Response) VisitDeleteArticleByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteArticleByID401JSONResponse Unauthorized

func (response DeleteArticleByID401JSONResponse) VisitDeleteArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleByID404JSONResponse NotFound

func (response DeleteArticleByID404JSONResponse) VisitDeleteArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArticleByID500JSONResponse InternalServerError

func (response DeleteArticleByID500JSONResponse) VisitDeleteArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleByIDRequestObject struct {
	ArticleId string `json:"article_id"`
}

type GetArticleByIDResponseObject interface {
	VisitGetArticleByIDResponse(w http.ResponseWriter) error
}

type GetArticleByID200JSONResponse Article

func (response GetArticleByID200JSONResponse) VisitGetArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleByID404JSONResponse NotFound

func (response GetArticleByID404JSONResponse) VisitGetArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticleByID500JSONResponse InternalServerError

func (response GetArticleByID500JSONResponse) VisitGetArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByIDRequestObject struct {
	ArticleId string `json:"article_id"`
	Body      *UpdateArticleByIDJSONRequestBody
}

type UpdateArticleByIDResponseObject interface {
	VisitUpdateArticleByIDResponse(w http.ResponseWriter) error
}

type UpdateArticleByID200JSONResponse Article

func (response UpdateArticleByID200JSONResponse) VisitUpdateArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByID400JSONResponse BadRequest

func (response UpdateArticleByID400JSONResponse) VisitUpdateArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByID401JSONResponse Unauthorized

func (response UpdateArticleByID401JSONResponse) VisitUpdateArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByID404JSONResponse NotFound

func (response UpdateArticleByID404JSONResponse) VisitUpdateArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByID409JSONResponse AlreadyExists

func (response UpdateArticleByID409JSONResponse) VisitUpdateArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArticleByID500JSONResponse InternalServerError

func (response UpdateArticleByID500JSONResponse) VisitUpdateArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleByIDRequestObject struct {
	ArticleId string `json:"article_id"`
}

type PublishArticleByIDResponseObject interface {
	VisitPublishArticleByIDResponse(w http.ResponseWriter) error
}

type PublishArticleByID200JSONResponse Article

func (response PublishArticleByID200JSONResponse) VisitPublishArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleByID401JSONResponse Unauthorized

func (response PublishArticleByID401JSONResponse) VisitPublishArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleByID404JSONResponse NotFound

func (response PublishArticleByID404JSONResponse) VisitPublishArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PublishArticleByID500JSONResponse InternalServerError

func (response PublishArticleByID500JSONResponse) VisitPublishArticleByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IncrementArticleViewCountRequestObject struct {
	ArticleId string `json:"article_id"`
}

type IncrementArticleViewCountResponseObject interface {
	VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error
}

type IncrementArticleViewCount200JSONResponse struct {
	// ViewCount 更新後の閲覧数
	ViewCount *int `json:"view_count,omitempty"`
}

func (response IncrementArticleViewCount200JSONResponse) VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IncrementArticleViewCount404JSONResponse NotFound

func (response IncrementArticleViewCount404JSONResponse) VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type IncrementArticleViewCount500JSONResponse InternalServerError

func (response IncrementArticleViewCount500JSONResponse) VisitIncrementArticleViewCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoriesRequestObject struct {
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter) error
}

type GetCategories200JSONResponse CategoryList

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategories500JSONResponse InternalServerError

func (response GetCategories500JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategoryRequestObject struct {
	Body *CreateCategoryJSONRequestBody
}

type CreateCategoryResponseObject interface {
	VisitCreateCategoryResponse(w http.ResponseWriter) error
}

type CreateCategory201JSONResponse Category

func (response CreateCategory201JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory400JSONResponse BadRequest

func (response CreateCategory400JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory401JSONResponse Unauthorized

func (response CreateCategory401JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory409JSONResponse AlreadyExists

func (response CreateCategory409JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategory500JSONResponse InternalServerError

func (response CreateCategory500JSONResponse) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryByIDRequestObject struct {
	CategoryId string `json:"category_id"`
}

type DeleteCategoryByIDResponseObject interface {
	VisitDeleteCategoryByIDResponse(w http.ResponseWriter) error
}

type DeleteCategoryByID204Response struct {
}

func (response DeleteCategoryByID204Response) VisitDeleteCategoryByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategoryByID401JSONResponse Unauthorized

func (response DeleteCategoryByID401JSONResponse) VisitDeleteCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryByID404JSONResponse NotFound

func (response DeleteCategoryByID404JSONResponse) VisitDeleteCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryByID500JSONResponse InternalServerError

func (response DeleteCategoryByID500JSONResponse) VisitDeleteCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryByIDRequestObject struct {
	CategoryId string `json:"category_id"`
}

type GetCategoryByIDResponseObject interface {
	VisitGetCategoryByIDResponse(w http.ResponseWriter) error
}

type GetCategoryByID200JSONResponse Category

func (response GetCategoryByID200JSONResponse) VisitGetCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryByID404JSONResponse NotFound

func (response GetCategoryByID404JSONResponse) VisitGetCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryByID500JSONResponse InternalServerError

func (response GetCategoryByID500JSONResponse) VisitGetCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByIDRequestObject struct {
	CategoryId string `json:"category_id"`
	Body       *UpdateCategoryByIDJSONRequestBody
}

type UpdateCategoryByIDResponseObject interface {
	VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error
}

type UpdateCategoryByID200JSONResponse Category

func (response UpdateCategoryByID200JSONResponse) VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByID400JSONResponse BadRequest

func (response UpdateCategoryByID400JSONResponse) VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByID401JSONResponse Unauthorized

func (response UpdateCategoryByID401JSONResponse) VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByID404JSONResponse NotFound

func (response UpdateCategoryByID404JSONResponse) VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByID409JSONResponse AlreadyExists

func (response UpdateCategoryByID409JSONResponse) VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCategoryByID500JSONResponse InternalServerError

func (response UpdateCategoryByID500JSONResponse) VisitUpdateCategoryByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByCategoryIDRequestObject struct {
	CategoryId string `json:"category_id"`
	Params     GetArticlesByCategoryIDParams
}

type GetArticlesByCategoryIDResponseObject interface {
	VisitGetArticlesByCategoryIDResponse(w http.ResponseWriter) error
}

type GetArticlesByCategoryID200JSONResponse ArticleList

func (response GetArticlesByCategoryID200JSONResponse) VisitGetArticlesByCategoryIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByCategoryID404JSONResponse NotFound

func (response GetArticlesByCategoryID404JSONResponse) VisitGetArticlesByCategoryIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByCategoryID500JSONResponse InternalServerError

func (response GetArticlesByCategoryID500JSONResponse) VisitGetArticlesByCategoryIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HealthcheckRequestObject struct {
}

type HealthcheckResponseObject interface {
	VisitHealthcheckResponse(w http.ResponseWriter) error
}

type Healthcheck200JSONResponse HealthCheck

func (response Healthcheck200JSONResponse) VisitHealthcheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchArticlesRequestObject struct {
	Params SearchArticlesParams
}

type SearchArticlesResponseObject interface {
	VisitSearchArticlesResponse(w http.ResponseWriter) error
}

type SearchArticles200JSONResponse ArticleList

func (response SearchArticles200JSONResponse) VisitSearchArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchArticles400JSONResponse BadRequest

func (response SearchArticles400JSONResponse) VisitSearchArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchArticles500JSONResponse InternalServerError

func (response SearchArticles500JSONResponse) VisitSearchArticlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse TagList

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags500JSONResponse InternalServerError

func (response GetTags500JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagRequestObject struct {
	Body *CreateTagJSONRequestBody
}

type CreateTagResponseObject interface {
	VisitCreateTagResponse(w http.ResponseWriter) error
}

type CreateTag201JSONResponse Tag

func (response CreateTag201JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag400JSONResponse BadRequest

func (response CreateTag400JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag401JSONResponse Unauthorized

func (response CreateTag401JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag409JSONResponse AlreadyExists

func (response CreateTag409JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag500JSONResponse InternalServerError

func (response CreateTag500JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagByIDRequestObject struct {
	TagId string `json:"tag_id"`
}

type DeleteTagByIDResponseObject interface {
	VisitDeleteTagByIDResponse(w http.ResponseWriter) error
}

type DeleteTagByID204Response struct {
}

func (response DeleteTagByID204Response) VisitDeleteTagByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTagByID401JSONResponse Unauthorized

func (response DeleteTagByID401JSONResponse) VisitDeleteTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagByID404JSONResponse NotFound

func (response DeleteTagByID404JSONResponse) VisitDeleteTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagByID500JSONResponse InternalServerError

func (response DeleteTagByID500JSONResponse) VisitDeleteTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagByIDRequestObject struct {
	TagId string `json:"tag_id"`
}

type GetTagByIDResponseObject interface {
	VisitGetTagByIDResponse(w http.ResponseWriter) error
}

type GetTagByID200JSONResponse Tag

func (response GetTagByID200JSONResponse) VisitGetTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagByID404JSONResponse NotFound

func (response GetTagByID404JSONResponse) VisitGetTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTagByID500JSONResponse InternalServerError

func (response GetTagByID500JSONResponse) VisitGetTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByIDRequestObject struct {
	TagId string `json:"tag_id"`
	Body  *UpdateTagByIDJSONRequestBody
}

type UpdateTagByIDResponseObject interface {
	VisitUpdateTagByIDResponse(w http.ResponseWriter) error
}

type UpdateTagByID200JSONResponse Tag

func (response UpdateTagByID200JSONResponse) VisitUpdateTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByID400JSONResponse BadRequest

func (response UpdateTagByID400JSONResponse) VisitUpdateTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByID401JSONResponse Unauthorized

func (response UpdateTagByID401JSONResponse) VisitUpdateTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByID404JSONResponse NotFound

func (response UpdateTagByID404JSONResponse) VisitUpdateTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByID409JSONResponse AlreadyExists

func (response UpdateTagByID409JSONResponse) VisitUpdateTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagByID500JSONResponse InternalServerError

func (response UpdateTagByID500JSONResponse) VisitUpdateTagByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByTagIDRequestObject struct {
	TagId  string `json:"tag_id"`
	Params GetArticlesByTagIDParams
}

type GetArticlesByTagIDResponseObject interface {
	VisitGetArticlesByTagIDResponse(w http.ResponseWriter) error
}

type GetArticlesByTagID200JSONResponse ArticleList

func (response GetArticlesByTagID200JSONResponse) VisitGetArticlesByTagIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByTagID404JSONResponse NotFound

func (response GetArticlesByTagID404JSONResponse) VisitGetArticlesByTagIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArticlesByTagID500JSONResponse InternalServerError

func (response GetArticlesByTagID500JSONResponse) VisitGetArticlesByTagIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 記事一覧取得
	// (GET /v1/articles)
	GetArticles(ctx *gin.Context, request GetArticlesRequestObject) (GetArticlesResponseObject, error)
	// 記事作成
	// (POST /v1/articles)
	CreateArticle(ctx *gin.Context, request CreateArticleRequestObject) (CreateArticleResponseObject, error)
	// 月別アーカイブ取得
	// (GET /v1/articles/archive/{year}/{month})
	GetArticlesByMonth(ctx *gin.Context, request GetArticlesByMonthRequestObject) (GetArticlesByMonthResponseObject, error)
	// 人気記事一覧取得
	// (GET /v1/articles/popular)
	GetPopularArticles(ctx *gin.Context, request GetPopularArticlesRequestObject) (GetPopularArticlesResponseObject, error)
	// 最新記事一覧取得
	// (GET /v1/articles/recent)
	GetRecentArticles(ctx *gin.Context, request GetRecentArticlesRequestObject) (GetRecentArticlesResponseObject, error)
	// 記事削除
	// (DELETE /v1/articles/{article_id})
	DeleteArticleByID(ctx *gin.Context, request DeleteArticleByIDRequestObject) (DeleteArticleByIDResponseObject, error)
	// 記事詳細取得
	// (GET /v1/articles/{article_id})
	GetArticleByID(ctx *gin.Context, request GetArticleByIDRequestObject) (GetArticleByIDResponseObject, error)
	// 記事更新
	// (PUT /v1/articles/{article_id})
	UpdateArticleByID(ctx *gin.Context, request UpdateArticleByIDRequestObject) (UpdateArticleByIDResponseObject, error)
	// 記事公開
	// (PATCH /v1/articles/{article_id}/publish)
	PublishArticleByID(ctx *gin.Context, request PublishArticleByIDRequestObject) (PublishArticleByIDResponseObject, error)
	// 閲覧数更新
	// (PATCH /v1/articles/{article_id}/views)
	IncrementArticleViewCount(ctx *gin.Context, request IncrementArticleViewCountRequestObject) (IncrementArticleViewCountResponseObject, error)
	// カテゴリ一覧取得
	// (GET /v1/categories)
	GetCategories(ctx *gin.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)
	// カテゴリ作成
	// (POST /v1/categories)
	CreateCategory(ctx *gin.Context, request CreateCategoryRequestObject) (CreateCategoryResponseObject, error)
	// カテゴリ削除
	// (DELETE /v1/categories/{category_id})
	DeleteCategoryByID(ctx *gin.Context, request DeleteCategoryByIDRequestObject) (DeleteCategoryByIDResponseObject, error)
	// カテゴリ詳細取得
	// (GET /v1/categories/{category_id})
	GetCategoryByID(ctx *gin.Context, request GetCategoryByIDRequestObject) (GetCategoryByIDResponseObject, error)
	// カテゴリ更新
	// (PUT /v1/categories/{category_id})
	UpdateCategoryByID(ctx *gin.Context, request UpdateCategoryByIDRequestObject) (UpdateCategoryByIDResponseObject, error)
	// カテゴリ別記事一覧取得
	// (GET /v1/categories/{category_id}/articles)
	GetArticlesByCategoryID(ctx *gin.Context, request GetArticlesByCategoryIDRequestObject) (GetArticlesByCategoryIDResponseObject, error)
	// ヘルスチェックAPI
	// (GET /v1/health)
	Healthcheck(ctx *gin.Context, request HealthcheckRequestObject) (HealthcheckResponseObject, error)
	// 記事検索
	// (GET /v1/search)
	SearchArticles(ctx *gin.Context, request SearchArticlesRequestObject) (SearchArticlesResponseObject, error)
	// タグ一覧取得
	// (GET /v1/tags)
	GetTags(ctx *gin.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// タグ作成
	// (POST /v1/tags)
	CreateTag(ctx *gin.Context, request CreateTagRequestObject) (CreateTagResponseObject, error)
	// タグ削除
	// (DELETE /v1/tags/{tag_id})
	DeleteTagByID(ctx *gin.Context, request DeleteTagByIDRequestObject) (DeleteTagByIDResponseObject, error)
	// タグ詳細取得
	// (GET /v1/tags/{tag_id})
	GetTagByID(ctx *gin.Context, request GetTagByIDRequestObject) (GetTagByIDResponseObject, error)
	// タグ更新
	// (PUT /v1/tags/{tag_id})
	UpdateTagByID(ctx *gin.Context, request UpdateTagByIDRequestObject) (UpdateTagByIDResponseObject, error)
	// タグ別記事一覧取得
	// (GET /v1/tags/{tag_id}/articles)
	GetArticlesByTagID(ctx *gin.Context, request GetArticlesByTagIDRequestObject) (GetArticlesByTagIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetArticles operation middleware
func (sh *strictHandler) GetArticles(ctx *gin.Context, params GetArticlesParams) {
	var request GetArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticles(ctx, request.(GetArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesResponseObject); ok {
		if err := validResponse.VisitGetArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArticle operation middleware
func (sh *strictHandler) CreateArticle(ctx *gin.Context) {
	var request CreateArticleRequestObject

	var body CreateArticleJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArticle(ctx, request.(CreateArticleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArticle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateArticleResponseObject); ok {
		if err := validResponse.VisitCreateArticleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesByMonth operation middleware
func (sh *strictHandler) GetArticlesByMonth(ctx *gin.Context, year YearParam, month MonthParam, params GetArticlesByMonthParams) {
	var request GetArticlesByMonthRequestObject

	request.Year = year
	request.Month = month
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesByMonth(ctx, request.(GetArticlesByMonthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesByMonth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesByMonthResponseObject); ok {
		if err := validResponse.VisitGetArticlesByMonthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPopularArticles operation middleware
func (sh *strictHandler) GetPopularArticles(ctx *gin.Context, params GetPopularArticlesParams) {
	var request GetPopularArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPopularArticles(ctx, request.(GetPopularArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPopularArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPopularArticlesResponseObject); ok {
		if err := validResponse.VisitGetPopularArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecentArticles operation middleware
func (sh *strictHandler) GetRecentArticles(ctx *gin.Context, params GetRecentArticlesParams) {
	var request GetRecentArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecentArticles(ctx, request.(GetRecentArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecentArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRecentArticlesResponseObject); ok {
		if err := validResponse.VisitGetRecentArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArticleByID operation middleware
func (sh *strictHandler) DeleteArticleByID(ctx *gin.Context, articleId string) {
	var request DeleteArticleByIDRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArticleByID(ctx, request.(DeleteArticleByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArticleByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteArticleByIDResponseObject); ok {
		if err := validResponse.VisitDeleteArticleByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticleByID operation middleware
func (sh *strictHandler) GetArticleByID(ctx *gin.Context, articleId string) {
	var request GetArticleByIDRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticleByID(ctx, request.(GetArticleByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticleByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticleByIDResponseObject); ok {
		if err := validResponse.VisitGetArticleByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateArticleByID operation middleware
func (sh *strictHandler) UpdateArticleByID(ctx *gin.Context, articleId string) {
	var request UpdateArticleByIDRequestObject

	request.ArticleId = articleId

	var body UpdateArticleByIDJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateArticleByID(ctx, request.(UpdateArticleByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateArticleByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateArticleByIDResponseObject); ok {
		if err := validResponse.VisitUpdateArticleByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishArticleByID operation middleware
func (sh *strictHandler) PublishArticleByID(ctx *gin.Context, articleId string) {
	var request PublishArticleByIDRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PublishArticleByID(ctx, request.(PublishArticleByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishArticleByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PublishArticleByIDResponseObject); ok {
		if err := validResponse.VisitPublishArticleByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// IncrementArticleViewCount operation middleware
func (sh *strictHandler) IncrementArticleViewCount(ctx *gin.Context, articleId string) {
	var request IncrementArticleViewCountRequestObject

	request.ArticleId = articleId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IncrementArticleViewCount(ctx, request.(IncrementArticleViewCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IncrementArticleViewCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(IncrementArticleViewCountResponseObject); ok {
		if err := validResponse.VisitIncrementArticleViewCountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(ctx *gin.Context) {
	var request GetCategoriesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx, request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		if err := validResponse.VisitGetCategoriesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCategory operation middleware
func (sh *strictHandler) CreateCategory(ctx *gin.Context) {
	var request CreateCategoryRequestObject

	var body CreateCategoryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCategory(ctx, request.(CreateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateCategoryResponseObject); ok {
		if err := validResponse.VisitCreateCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCategoryByID operation middleware
func (sh *strictHandler) DeleteCategoryByID(ctx *gin.Context, categoryId string) {
	var request DeleteCategoryByIDRequestObject

	request.CategoryId = categoryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategoryByID(ctx, request.(DeleteCategoryByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategoryByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteCategoryByIDResponseObject); ok {
		if err := validResponse.VisitDeleteCategoryByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCategoryByID operation middleware
func (sh *strictHandler) GetCategoryByID(ctx *gin.Context, categoryId string) {
	var request GetCategoryByIDRequestObject

	request.CategoryId = categoryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryByID(ctx, request.(GetCategoryByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCategoryByIDResponseObject); ok {
		if err := validResponse.VisitGetCategoryByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateCategoryByID operation middleware
func (sh *strictHandler) UpdateCategoryByID(ctx *gin.Context, categoryId string) {
	var request UpdateCategoryByIDRequestObject

	request.CategoryId = categoryId

	var body UpdateCategoryByIDJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateCategoryByID(ctx, request.(UpdateCategoryByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateCategoryByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateCategoryByIDResponseObject); ok {
		if err := validResponse.VisitUpdateCategoryByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesByCategoryID operation middleware
func (sh *strictHandler) GetArticlesByCategoryID(ctx *gin.Context, categoryId string, params GetArticlesByCategoryIDParams) {
	var request GetArticlesByCategoryIDRequestObject

	request.CategoryId = categoryId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesByCategoryID(ctx, request.(GetArticlesByCategoryIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesByCategoryID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesByCategoryIDResponseObject); ok {
		if err := validResponse.VisitGetArticlesByCategoryIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Healthcheck operation middleware
func (sh *strictHandler) Healthcheck(ctx *gin.Context) {
	var request HealthcheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Healthcheck(ctx, request.(HealthcheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Healthcheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HealthcheckResponseObject); ok {
		if err := validResponse.VisitHealthcheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchArticles operation middleware
func (sh *strictHandler) SearchArticles(ctx *gin.Context, params SearchArticlesParams) {
	var request SearchArticlesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchArticles(ctx, request.(SearchArticlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchArticles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchArticlesResponseObject); ok {
		if err := validResponse.VisitSearchArticlesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(ctx *gin.Context) {
	var request GetTagsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx, request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		if err := validResponse.VisitGetTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTag operation middleware
func (sh *strictHandler) CreateTag(ctx *gin.Context) {
	var request CreateTagRequestObject

	var body CreateTagJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTag(ctx, request.(CreateTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTagResponseObject); ok {
		if err := validResponse.VisitCreateTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTagByID operation middleware
func (sh *strictHandler) DeleteTagByID(ctx *gin.Context, tagId string) {
	var request DeleteTagByIDRequestObject

	request.TagId = tagId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTagByID(ctx, request.(DeleteTagByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTagByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTagByIDResponseObject); ok {
		if err := validResponse.VisitDeleteTagByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagByID operation middleware
func (sh *strictHandler) GetTagByID(ctx *gin.Context, tagId string) {
	var request GetTagByIDRequestObject

	request.TagId = tagId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagByID(ctx, request.(GetTagByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagByIDResponseObject); ok {
		if err := validResponse.VisitGetTagByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTagByID operation middleware
func (sh *strictHandler) UpdateTagByID(ctx *gin.Context, tagId string) {
	var request UpdateTagByIDRequestObject

	request.TagId = tagId

	var body UpdateTagByIDJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTagByID(ctx, request.(UpdateTagByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTagByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTagByIDResponseObject); ok {
		if err := validResponse.VisitUpdateTagByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArticlesByTagID operation middleware
func (sh *strictHandler) GetArticlesByTagID(ctx *gin.Context, tagId string, params GetArticlesByTagIDParams) {
	var request GetArticlesByTagIDRequestObject

	request.TagId = tagId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArticlesByTagID(ctx, request.(GetArticlesByTagIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArticlesByTagID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArticlesByTagIDResponseObject); ok {
		if err := validResponse.VisitGetArticlesByTagIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
