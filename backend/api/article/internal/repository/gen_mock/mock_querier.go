// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/gen_sqlc/querier.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/gen_sqlc/querier.go -package mock -destination=./internal/repository/gen_mock/mock_querier.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gen_sqlc "github.com/tamaco489/tamaco-blog/backend/api/article/internal/repository/gen_sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddArticleTag mocks base method.
func (m *MockQuerier) AddArticleTag(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.AddArticleTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArticleTag", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArticleTag indicates an expected call of AddArticleTag.
func (mr *MockQuerierMockRecorder) AddArticleTag(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticleTag", reflect.TypeOf((*MockQuerier)(nil).AddArticleTag), ctx, db, arg)
}

// AddArticleTagBulk mocks base method.
func (m *MockQuerier) AddArticleTagBulk(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.AddArticleTagBulkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArticleTagBulk", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArticleTagBulk indicates an expected call of AddArticleTagBulk.
func (mr *MockQuerierMockRecorder) AddArticleTagBulk(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticleTagBulk", reflect.TypeOf((*MockQuerier)(nil).AddArticleTagBulk), ctx, db, arg)
}

// CheckArticleHasTag mocks base method.
func (m *MockQuerier) CheckArticleHasTag(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.CheckArticleHasTagParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckArticleHasTag", ctx, db, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckArticleHasTag indicates an expected call of CheckArticleHasTag.
func (mr *MockQuerierMockRecorder) CheckArticleHasTag(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckArticleHasTag", reflect.TypeOf((*MockQuerier)(nil).CheckArticleHasTag), ctx, db, arg)
}

// CountArticles mocks base method.
func (m *MockQuerier) CountArticles(ctx context.Context, db gen_sqlc.DBTX) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountArticles", ctx, db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountArticles indicates an expected call of CountArticles.
func (mr *MockQuerierMockRecorder) CountArticles(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountArticles", reflect.TypeOf((*MockQuerier)(nil).CountArticles), ctx, db)
}

// CountArticlesByCategory mocks base method.
func (m *MockQuerier) CountArticlesByCategory(ctx context.Context, db gen_sqlc.DBTX, categoryID uuid.NullUUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountArticlesByCategory", ctx, db, categoryID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountArticlesByCategory indicates an expected call of CountArticlesByCategory.
func (mr *MockQuerierMockRecorder) CountArticlesByCategory(ctx, db, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountArticlesByCategory", reflect.TypeOf((*MockQuerier)(nil).CountArticlesByCategory), ctx, db, categoryID)
}

// CountArticlesByMonth mocks base method.
func (m *MockQuerier) CountArticlesByMonth(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.CountArticlesByMonthParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountArticlesByMonth", ctx, db, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountArticlesByMonth indicates an expected call of CountArticlesByMonth.
func (mr *MockQuerierMockRecorder) CountArticlesByMonth(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountArticlesByMonth", reflect.TypeOf((*MockQuerier)(nil).CountArticlesByMonth), ctx, db, arg)
}

// CountArticlesByTagID mocks base method.
func (m *MockQuerier) CountArticlesByTagID(ctx context.Context, db gen_sqlc.DBTX, tagID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountArticlesByTagID", ctx, db, tagID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountArticlesByTagID indicates an expected call of CountArticlesByTagID.
func (mr *MockQuerierMockRecorder) CountArticlesByTagID(ctx, db, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountArticlesByTagID", reflect.TypeOf((*MockQuerier)(nil).CountArticlesByTagID), ctx, db, tagID)
}

// CountSearchArticles mocks base method.
func (m *MockQuerier) CountSearchArticles(ctx context.Context, db gen_sqlc.DBTX, query sql.NullString) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSearchArticles", ctx, db, query)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSearchArticles indicates an expected call of CountSearchArticles.
func (mr *MockQuerierMockRecorder) CountSearchArticles(ctx, db, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSearchArticles", reflect.TypeOf((*MockQuerier)(nil).CountSearchArticles), ctx, db, query)
}

// CreateArticle mocks base method.
func (m *MockQuerier) CreateArticle(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.CreateArticleParams) (gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockQuerierMockRecorder) CreateArticle(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockQuerier)(nil).CreateArticle), ctx, db, arg)
}

// CreateArticleSEOMetadata mocks base method.
func (m *MockQuerier) CreateArticleSEOMetadata(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.CreateArticleSEOMetadataParams) (gen_sqlc.ArticleSeoMetadatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticleSEOMetadata", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.ArticleSeoMetadatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticleSEOMetadata indicates an expected call of CreateArticleSEOMetadata.
func (mr *MockQuerierMockRecorder) CreateArticleSEOMetadata(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticleSEOMetadata", reflect.TypeOf((*MockQuerier)(nil).CreateArticleSEOMetadata), ctx, db, arg)
}

// CreateCategory mocks base method.
func (m *MockQuerier) CreateCategory(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.CreateCategoryParams) (gen_sqlc.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockQuerierMockRecorder) CreateCategory(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockQuerier)(nil).CreateCategory), ctx, db, arg)
}

// CreateTag mocks base method.
func (m *MockQuerier) CreateTag(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.CreateTagParams) (gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockQuerierMockRecorder) CreateTag(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockQuerier)(nil).CreateTag), ctx, db, arg)
}

// DecrementTagUsageCount mocks base method.
func (m *MockQuerier) DecrementTagUsageCount(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementTagUsageCount", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementTagUsageCount indicates an expected call of DecrementTagUsageCount.
func (mr *MockQuerierMockRecorder) DecrementTagUsageCount(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementTagUsageCount", reflect.TypeOf((*MockQuerier)(nil).DecrementTagUsageCount), ctx, db, id)
}

// DeleteArticle mocks base method.
func (m *MockQuerier) DeleteArticle(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockQuerierMockRecorder) DeleteArticle(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockQuerier)(nil).DeleteArticle), ctx, db, id)
}

// DeleteArticleSEOMetadata mocks base method.
func (m *MockQuerier) DeleteArticleSEOMetadata(ctx context.Context, db gen_sqlc.DBTX, articleID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleSEOMetadata", ctx, db, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleSEOMetadata indicates an expected call of DeleteArticleSEOMetadata.
func (mr *MockQuerierMockRecorder) DeleteArticleSEOMetadata(ctx, db, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleSEOMetadata", reflect.TypeOf((*MockQuerier)(nil).DeleteArticleSEOMetadata), ctx, db, articleID)
}

// DeleteCategory mocks base method.
func (m *MockQuerier) DeleteCategory(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockQuerierMockRecorder) DeleteCategory(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockQuerier)(nil).DeleteCategory), ctx, db, id)
}

// DeleteTag mocks base method.
func (m *MockQuerier) DeleteTag(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockQuerierMockRecorder) DeleteTag(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockQuerier)(nil).DeleteTag), ctx, db, id)
}

// GetArticle mocks base method.
func (m *MockQuerier) GetArticle(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) (gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", ctx, db, id)
	ret0, _ := ret[0].(gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockQuerierMockRecorder) GetArticle(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockQuerier)(nil).GetArticle), ctx, db, id)
}

// GetArticleBySlug mocks base method.
func (m *MockQuerier) GetArticleBySlug(ctx context.Context, db gen_sqlc.DBTX, slug string) (gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleBySlug", ctx, db, slug)
	ret0, _ := ret[0].(gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleBySlug indicates an expected call of GetArticleBySlug.
func (mr *MockQuerierMockRecorder) GetArticleBySlug(ctx, db, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleBySlug", reflect.TypeOf((*MockQuerier)(nil).GetArticleBySlug), ctx, db, slug)
}

// GetArticleBySlugWithRelations mocks base method.
func (m *MockQuerier) GetArticleBySlugWithRelations(ctx context.Context, db gen_sqlc.DBTX, slug string) (gen_sqlc.GetArticleBySlugWithRelationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleBySlugWithRelations", ctx, db, slug)
	ret0, _ := ret[0].(gen_sqlc.GetArticleBySlugWithRelationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleBySlugWithRelations indicates an expected call of GetArticleBySlugWithRelations.
func (mr *MockQuerierMockRecorder) GetArticleBySlugWithRelations(ctx, db, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleBySlugWithRelations", reflect.TypeOf((*MockQuerier)(nil).GetArticleBySlugWithRelations), ctx, db, slug)
}

// GetArticleSEOMetadata mocks base method.
func (m *MockQuerier) GetArticleSEOMetadata(ctx context.Context, db gen_sqlc.DBTX, articleID uuid.UUID) (gen_sqlc.ArticleSeoMetadatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleSEOMetadata", ctx, db, articleID)
	ret0, _ := ret[0].(gen_sqlc.ArticleSeoMetadatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleSEOMetadata indicates an expected call of GetArticleSEOMetadata.
func (mr *MockQuerierMockRecorder) GetArticleSEOMetadata(ctx, db, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleSEOMetadata", reflect.TypeOf((*MockQuerier)(nil).GetArticleSEOMetadata), ctx, db, articleID)
}

// GetArticleWithRelations mocks base method.
func (m *MockQuerier) GetArticleWithRelations(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) (gen_sqlc.GetArticleWithRelationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleWithRelations", ctx, db, id)
	ret0, _ := ret[0].(gen_sqlc.GetArticleWithRelationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleWithRelations indicates an expected call of GetArticleWithRelations.
func (mr *MockQuerierMockRecorder) GetArticleWithRelations(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleWithRelations", reflect.TypeOf((*MockQuerier)(nil).GetArticleWithRelations), ctx, db, id)
}

// GetArticleWithTags mocks base method.
func (m *MockQuerier) GetArticleWithTags(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) ([]gen_sqlc.GetArticleWithTagsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleWithTags", ctx, db, id)
	ret0, _ := ret[0].([]gen_sqlc.GetArticleWithTagsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleWithTags indicates an expected call of GetArticleWithTags.
func (mr *MockQuerierMockRecorder) GetArticleWithTags(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleWithTags", reflect.TypeOf((*MockQuerier)(nil).GetArticleWithTags), ctx, db, id)
}

// GetCategory mocks base method.
func (m *MockQuerier) GetCategory(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) (gen_sqlc.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, db, id)
	ret0, _ := ret[0].(gen_sqlc.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockQuerierMockRecorder) GetCategory(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockQuerier)(nil).GetCategory), ctx, db, id)
}

// GetCategoryBySlug mocks base method.
func (m *MockQuerier) GetCategoryBySlug(ctx context.Context, db gen_sqlc.DBTX, slug string) (gen_sqlc.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryBySlug", ctx, db, slug)
	ret0, _ := ret[0].(gen_sqlc.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryBySlug indicates an expected call of GetCategoryBySlug.
func (mr *MockQuerierMockRecorder) GetCategoryBySlug(ctx, db, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryBySlug", reflect.TypeOf((*MockQuerier)(nil).GetCategoryBySlug), ctx, db, slug)
}

// GetTag mocks base method.
func (m *MockQuerier) GetTag(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) (gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, db, id)
	ret0, _ := ret[0].(gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockQuerierMockRecorder) GetTag(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockQuerier)(nil).GetTag), ctx, db, id)
}

// GetTagBySlug mocks base method.
func (m *MockQuerier) GetTagBySlug(ctx context.Context, db gen_sqlc.DBTX, slug string) (gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagBySlug", ctx, db, slug)
	ret0, _ := ret[0].(gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagBySlug indicates an expected call of GetTagBySlug.
func (mr *MockQuerierMockRecorder) GetTagBySlug(ctx, db, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagBySlug", reflect.TypeOf((*MockQuerier)(nil).GetTagBySlug), ctx, db, slug)
}

// IncrementArticleViewCount mocks base method.
func (m *MockQuerier) IncrementArticleViewCount(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementArticleViewCount", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementArticleViewCount indicates an expected call of IncrementArticleViewCount.
func (mr *MockQuerierMockRecorder) IncrementArticleViewCount(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementArticleViewCount", reflect.TypeOf((*MockQuerier)(nil).IncrementArticleViewCount), ctx, db, id)
}

// IncrementTagUsageCount mocks base method.
func (m *MockQuerier) IncrementTagUsageCount(ctx context.Context, db gen_sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementTagUsageCount", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementTagUsageCount indicates an expected call of IncrementTagUsageCount.
func (mr *MockQuerierMockRecorder) IncrementTagUsageCount(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementTagUsageCount", reflect.TypeOf((*MockQuerier)(nil).IncrementTagUsageCount), ctx, db, id)
}

// ListArticleIDsByTagID mocks base method.
func (m *MockQuerier) ListArticleIDsByTagID(ctx context.Context, db gen_sqlc.DBTX, tagID uuid.UUID) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticleIDsByTagID", ctx, db, tagID)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticleIDsByTagID indicates an expected call of ListArticleIDsByTagID.
func (mr *MockQuerierMockRecorder) ListArticleIDsByTagID(ctx, db, tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticleIDsByTagID", reflect.TypeOf((*MockQuerier)(nil).ListArticleIDsByTagID), ctx, db, tagID)
}

// ListArticles mocks base method.
func (m *MockQuerier) ListArticles(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesParams) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticles", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticles indicates an expected call of ListArticles.
func (mr *MockQuerierMockRecorder) ListArticles(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticles", reflect.TypeOf((*MockQuerier)(nil).ListArticles), ctx, db, arg)
}

// ListArticlesByCategory mocks base method.
func (m *MockQuerier) ListArticlesByCategory(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesByCategoryParams) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesByCategory", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesByCategory indicates an expected call of ListArticlesByCategory.
func (mr *MockQuerierMockRecorder) ListArticlesByCategory(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesByCategory", reflect.TypeOf((*MockQuerier)(nil).ListArticlesByCategory), ctx, db, arg)
}

// ListArticlesByMonth mocks base method.
func (m *MockQuerier) ListArticlesByMonth(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesByMonthParams) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesByMonth", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesByMonth indicates an expected call of ListArticlesByMonth.
func (mr *MockQuerierMockRecorder) ListArticlesByMonth(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesByMonth", reflect.TypeOf((*MockQuerier)(nil).ListArticlesByMonth), ctx, db, arg)
}

// ListArticlesByStatus mocks base method.
func (m *MockQuerier) ListArticlesByStatus(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesByStatusParams) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesByStatus", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesByStatus indicates an expected call of ListArticlesByStatus.
func (mr *MockQuerierMockRecorder) ListArticlesByStatus(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesByStatus", reflect.TypeOf((*MockQuerier)(nil).ListArticlesByStatus), ctx, db, arg)
}

// ListArticlesByTagID mocks base method.
func (m *MockQuerier) ListArticlesByTagID(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesByTagIDParams) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesByTagID", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesByTagID indicates an expected call of ListArticlesByTagID.
func (mr *MockQuerierMockRecorder) ListArticlesByTagID(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesByTagID", reflect.TypeOf((*MockQuerier)(nil).ListArticlesByTagID), ctx, db, arg)
}

// ListArticlesWithAllRelations mocks base method.
func (m *MockQuerier) ListArticlesWithAllRelations(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesWithAllRelationsParams) ([]gen_sqlc.ListArticlesWithAllRelationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesWithAllRelations", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.ListArticlesWithAllRelationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesWithAllRelations indicates an expected call of ListArticlesWithAllRelations.
func (mr *MockQuerierMockRecorder) ListArticlesWithAllRelations(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesWithAllRelations", reflect.TypeOf((*MockQuerier)(nil).ListArticlesWithAllRelations), ctx, db, arg)
}

// ListArticlesWithCategory mocks base method.
func (m *MockQuerier) ListArticlesWithCategory(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesWithCategoryParams) ([]gen_sqlc.ListArticlesWithCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesWithCategory", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.ListArticlesWithCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesWithCategory indicates an expected call of ListArticlesWithCategory.
func (mr *MockQuerierMockRecorder) ListArticlesWithCategory(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesWithCategory", reflect.TypeOf((*MockQuerier)(nil).ListArticlesWithCategory), ctx, db, arg)
}

// ListArticlesWithSEOMetadata mocks base method.
func (m *MockQuerier) ListArticlesWithSEOMetadata(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.ListArticlesWithSEOMetadataParams) ([]gen_sqlc.ListArticlesWithSEOMetadataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticlesWithSEOMetadata", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.ListArticlesWithSEOMetadataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticlesWithSEOMetadata indicates an expected call of ListArticlesWithSEOMetadata.
func (mr *MockQuerierMockRecorder) ListArticlesWithSEOMetadata(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticlesWithSEOMetadata", reflect.TypeOf((*MockQuerier)(nil).ListArticlesWithSEOMetadata), ctx, db, arg)
}

// ListCategories mocks base method.
func (m *MockQuerier) ListCategories(ctx context.Context, db gen_sqlc.DBTX) ([]gen_sqlc.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx, db)
	ret0, _ := ret[0].([]gen_sqlc.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockQuerierMockRecorder) ListCategories(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockQuerier)(nil).ListCategories), ctx, db)
}

// ListPopularArticles mocks base method.
func (m *MockQuerier) ListPopularArticles(ctx context.Context, db gen_sqlc.DBTX, limit int32) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPopularArticles", ctx, db, limit)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPopularArticles indicates an expected call of ListPopularArticles.
func (mr *MockQuerierMockRecorder) ListPopularArticles(ctx, db, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPopularArticles", reflect.TypeOf((*MockQuerier)(nil).ListPopularArticles), ctx, db, limit)
}

// ListPopularTags mocks base method.
func (m *MockQuerier) ListPopularTags(ctx context.Context, db gen_sqlc.DBTX, limit int32) ([]gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPopularTags", ctx, db, limit)
	ret0, _ := ret[0].([]gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPopularTags indicates an expected call of ListPopularTags.
func (mr *MockQuerierMockRecorder) ListPopularTags(ctx, db, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPopularTags", reflect.TypeOf((*MockQuerier)(nil).ListPopularTags), ctx, db, limit)
}

// ListRecentArticles mocks base method.
func (m *MockQuerier) ListRecentArticles(ctx context.Context, db gen_sqlc.DBTX, limit int32) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentArticles", ctx, db, limit)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentArticles indicates an expected call of ListRecentArticles.
func (mr *MockQuerierMockRecorder) ListRecentArticles(ctx, db, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentArticles", reflect.TypeOf((*MockQuerier)(nil).ListRecentArticles), ctx, db, limit)
}

// ListTags mocks base method.
func (m *MockQuerier) ListTags(ctx context.Context, db gen_sqlc.DBTX) ([]gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, db)
	ret0, _ := ret[0].([]gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockQuerierMockRecorder) ListTags(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockQuerier)(nil).ListTags), ctx, db)
}

// ListTagsByArticleID mocks base method.
func (m *MockQuerier) ListTagsByArticleID(ctx context.Context, db gen_sqlc.DBTX, articleID uuid.UUID) ([]gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsByArticleID", ctx, db, articleID)
	ret0, _ := ret[0].([]gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsByArticleID indicates an expected call of ListTagsByArticleID.
func (mr *MockQuerierMockRecorder) ListTagsByArticleID(ctx, db, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsByArticleID", reflect.TypeOf((*MockQuerier)(nil).ListTagsByArticleID), ctx, db, articleID)
}

// RemoveAllArticleTags mocks base method.
func (m *MockQuerier) RemoveAllArticleTags(ctx context.Context, db gen_sqlc.DBTX, articleID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllArticleTags", ctx, db, articleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllArticleTags indicates an expected call of RemoveAllArticleTags.
func (mr *MockQuerierMockRecorder) RemoveAllArticleTags(ctx, db, articleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllArticleTags", reflect.TypeOf((*MockQuerier)(nil).RemoveAllArticleTags), ctx, db, articleID)
}

// RemoveArticleTag mocks base method.
func (m *MockQuerier) RemoveArticleTag(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.RemoveArticleTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveArticleTag", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveArticleTag indicates an expected call of RemoveArticleTag.
func (mr *MockQuerierMockRecorder) RemoveArticleTag(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveArticleTag", reflect.TypeOf((*MockQuerier)(nil).RemoveArticleTag), ctx, db, arg)
}

// SearchArticles mocks base method.
func (m *MockQuerier) SearchArticles(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.SearchArticlesParams) ([]gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArticles", ctx, db, arg)
	ret0, _ := ret[0].([]gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArticles indicates an expected call of SearchArticles.
func (mr *MockQuerierMockRecorder) SearchArticles(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArticles", reflect.TypeOf((*MockQuerier)(nil).SearchArticles), ctx, db, arg)
}

// UpdateArticle mocks base method.
func (m *MockQuerier) UpdateArticle(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateArticleParams) (gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockQuerierMockRecorder) UpdateArticle(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockQuerier)(nil).UpdateArticle), ctx, db, arg)
}

// UpdateArticleSEOMetadata mocks base method.
func (m *MockQuerier) UpdateArticleSEOMetadata(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateArticleSEOMetadataParams) (gen_sqlc.ArticleSeoMetadatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleSEOMetadata", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.ArticleSeoMetadatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleSEOMetadata indicates an expected call of UpdateArticleSEOMetadata.
func (mr *MockQuerierMockRecorder) UpdateArticleSEOMetadata(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleSEOMetadata", reflect.TypeOf((*MockQuerier)(nil).UpdateArticleSEOMetadata), ctx, db, arg)
}

// UpdateArticleStatus mocks base method.
func (m *MockQuerier) UpdateArticleStatus(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateArticleStatusParams) (gen_sqlc.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleStatus", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticleStatus indicates an expected call of UpdateArticleStatus.
func (mr *MockQuerierMockRecorder) UpdateArticleStatus(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateArticleStatus), ctx, db, arg)
}

// UpdateCategory mocks base method.
func (m *MockQuerier) UpdateCategory(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateCategoryParams) (gen_sqlc.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockQuerierMockRecorder) UpdateCategory(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockQuerier)(nil).UpdateCategory), ctx, db, arg)
}

// UpdateCategoryArticleCount mocks base method.
func (m *MockQuerier) UpdateCategoryArticleCount(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateCategoryArticleCountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryArticleCount", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategoryArticleCount indicates an expected call of UpdateCategoryArticleCount.
func (mr *MockQuerierMockRecorder) UpdateCategoryArticleCount(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryArticleCount", reflect.TypeOf((*MockQuerier)(nil).UpdateCategoryArticleCount), ctx, db, arg)
}

// UpdateTag mocks base method.
func (m *MockQuerier) UpdateTag(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateTagParams) (gen_sqlc.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockQuerierMockRecorder) UpdateTag(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockQuerier)(nil).UpdateTag), ctx, db, arg)
}

// UpdateTagUsageCount mocks base method.
func (m *MockQuerier) UpdateTagUsageCount(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpdateTagUsageCountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagUsageCount", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagUsageCount indicates an expected call of UpdateTagUsageCount.
func (mr *MockQuerierMockRecorder) UpdateTagUsageCount(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagUsageCount", reflect.TypeOf((*MockQuerier)(nil).UpdateTagUsageCount), ctx, db, arg)
}

// UpsertArticleSEOMetadata mocks base method.
func (m *MockQuerier) UpsertArticleSEOMetadata(ctx context.Context, db gen_sqlc.DBTX, arg gen_sqlc.UpsertArticleSEOMetadataParams) (gen_sqlc.ArticleSeoMetadatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertArticleSEOMetadata", ctx, db, arg)
	ret0, _ := ret[0].(gen_sqlc.ArticleSeoMetadatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertArticleSEOMetadata indicates an expected call of UpsertArticleSEOMetadata.
func (mr *MockQuerierMockRecorder) UpsertArticleSEOMetadata(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertArticleSEOMetadata", reflect.TypeOf((*MockQuerier)(nil).UpsertArticleSEOMetadata), ctx, db, arg)
}
