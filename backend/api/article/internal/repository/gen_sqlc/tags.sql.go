// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package gen_sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTag = `-- name: CreateTag :one
INSERT INTO "tags" (
    "name", "slug"
) VALUES (
    $1, $2
) RETURNING id, name, slug, usage_count, created_at, updated_at
`

type CreateTagParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) CreateTag(ctx context.Context, db DBTX, arg CreateTagParams) (Tag, error) {
	row := db.QueryRowContext(ctx, createTag, arg.Name, arg.Slug)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.UsageCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementTagUsageCount = `-- name: DecrementTagUsageCount :exec
UPDATE "tags"
SET
    "usage_count" = GREATEST("usage_count" - 1, 0),
    "updated_at" = CURRENT_TIMESTAMP
WHERE "id" = $1
`

func (q *Queries) DecrementTagUsageCount(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.ExecContext(ctx, decrementTagUsageCount, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM "tags"
WHERE "id" = $1
`

func (q *Queries) DeleteTag(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name, slug, usage_count, created_at, updated_at FROM "tags"
WHERE "id" = $1
`

func (q *Queries) GetTag(ctx context.Context, db DBTX, id uuid.UUID) (Tag, error) {
	row := db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.UsageCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagBySlug = `-- name: GetTagBySlug :one
SELECT id, name, slug, usage_count, created_at, updated_at FROM "tags"
WHERE "slug" = $1
`

func (q *Queries) GetTagBySlug(ctx context.Context, db DBTX, slug string) (Tag, error) {
	row := db.QueryRowContext(ctx, getTagBySlug, slug)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.UsageCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementTagUsageCount = `-- name: IncrementTagUsageCount :exec
UPDATE "tags"
SET
    "usage_count" = "usage_count" + 1,
    "updated_at" = CURRENT_TIMESTAMP
WHERE "id" = $1
`

func (q *Queries) IncrementTagUsageCount(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.ExecContext(ctx, incrementTagUsageCount, id)
	return err
}

const listPopularTags = `-- name: ListPopularTags :many
SELECT id, name, slug, usage_count, created_at, updated_at FROM "tags"
WHERE "usage_count" > 0
ORDER BY "usage_count" DESC
LIMIT $1
`

func (q *Queries) ListPopularTags(ctx context.Context, db DBTX, limit int32) ([]Tag, error) {
	rows, err := db.QueryContext(ctx, listPopularTags, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.UsageCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, name, slug, usage_count, created_at, updated_at FROM "tags"
ORDER BY "usage_count" DESC, "name" ASC
`

func (q *Queries) ListTags(ctx context.Context, db DBTX) ([]Tag, error) {
	rows, err := db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.UsageCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE "tags"
SET
    "name" = $1,
    "slug" = $2,
    "updated_at" = CURRENT_TIMESTAMP
WHERE "id" = $3
RETURNING id, name, slug, usage_count, created_at, updated_at
`

type UpdateTagParams struct {
	Name string    `json:"name"`
	Slug string    `json:"slug"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, db DBTX, arg UpdateTagParams) (Tag, error) {
	row := db.QueryRowContext(ctx, updateTag, arg.Name, arg.Slug, arg.ID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.UsageCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTagUsageCount = `-- name: UpdateTagUsageCount :exec
UPDATE "tags"
SET
    "usage_count" = $1,
    "updated_at" = CURRENT_TIMESTAMP
WHERE "id" = $2
`

type UpdateTagUsageCountParams struct {
	UsageCount sql.NullInt32 `json:"usage_count"`
	ID         uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateTagUsageCount(ctx context.Context, db DBTX, arg UpdateTagUsageCountParams) error {
	_, err := db.ExecContext(ctx, updateTagUsageCount, arg.UsageCount, arg.ID)
	return err
}
