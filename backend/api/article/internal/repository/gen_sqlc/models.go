// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gen_sqlc

import (
	"database/sql"

	"github.com/google/uuid"
)

// ブログ記事
type Article struct {
	// 記事の一意識別子
	ID uuid.UUID `json:"id"`
	// 記事のタイトル
	Title string `json:"title"`
	// Markdown形式の記事本文
	Content string `json:"content"`
	// URL用の識別子
	Slug string `json:"slug"`
	// 記事の要約（SEO用）
	Summary sql.NullString `json:"summary"`
	// 記事の公開状態: draft(下書き), published(公開), private(非公開)
	Status string `json:"status"`
	// カテゴリID
	CategoryID uuid.NullUUID `json:"category_id"`
	// 閲覧数
	ViewCount sql.NullInt32 `json:"view_count"`
	// 公開日時
	PublishedAt sql.NullTime `json:"published_at"`
	CreatedAt   sql.NullTime `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

// 記事のSEOメタデータ
type ArticleSeoMetadatum struct {
	// 記事ID
	ArticleID uuid.UUID `json:"article_id"`
	// メタディスクリプション
	Description sql.NullString `json:"description"`
	// SEO用キーワード配列
	Keywords []string `json:"keywords"`
	// OGP画像URL
	OgImage   sql.NullString `json:"og_image"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

// 記事とタグの多対多リレーション
type ArticleTag struct {
	// 記事ID
	ArticleID uuid.UUID `json:"article_id"`
	// タグID
	TagID     uuid.UUID    `json:"tag_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

// ブログ記事のカテゴリー
type Category struct {
	// カテゴリの一意識別子
	ID uuid.UUID `json:"id"`
	// カテゴリ名
	Name string `json:"name"`
	// URL用の識別子
	Slug string `json:"slug"`
	// カテゴリの説明
	Description sql.NullString `json:"description"`
	// 表示順
	DisplayOrder sql.NullInt32 `json:"display_order"`
	// このカテゴリの記事数
	ArticleCount sql.NullInt32 `json:"article_count"`
	CreatedAt    sql.NullTime  `json:"created_at"`
	UpdatedAt    sql.NullTime  `json:"updated_at"`
}

// ブログ記事のタグ
type Tag struct {
	// タグの一意識別子
	ID uuid.UUID `json:"id"`
	// タグ名
	Name string `json:"name"`
	// URL用の識別子
	Slug string `json:"slug"`
	// タグが使用されている記事数
	UsageCount sql.NullInt32 `json:"usage_count"`
	CreatedAt  sql.NullTime  `json:"created_at"`
	UpdatedAt  sql.NullTime  `json:"updated_at"`
}
