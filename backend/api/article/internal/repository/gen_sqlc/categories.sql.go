// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package gen_sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO "categories" (
    "name",
    "slug",
    "description",
    "display_order"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, name, slug, description, display_order, article_count, created_at, updated_at
`

type CreateCategoryParams struct {
	Name         string         `json:"name"`
	Slug         string         `json:"slug"`
	Description  sql.NullString `json:"description"`
	DisplayOrder sql.NullInt32  `json:"display_order"`
}

func (q *Queries) CreateCategory(ctx context.Context, db DBTX, arg CreateCategoryParams) (Category, error) {
	row := db.QueryRowContext(ctx, createCategory,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.DisplayOrder,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.DisplayOrder,
		&i.ArticleCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM "categories"
WHERE "id" = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, slug, description, display_order, article_count, created_at, updated_at FROM "categories"
WHERE "id" = $1
`

func (q *Queries) GetCategory(ctx context.Context, db DBTX, id uuid.UUID) (Category, error) {
	row := db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.DisplayOrder,
		&i.ArticleCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT id, name, slug, description, display_order, article_count, created_at, updated_at FROM "categories"
WHERE "slug" = $1
`

func (q *Queries) GetCategoryBySlug(ctx context.Context, db DBTX, slug string) (Category, error) {
	row := db.QueryRowContext(ctx, getCategoryBySlug, slug)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.DisplayOrder,
		&i.ArticleCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, slug, description, display_order, article_count, created_at, updated_at FROM "categories"
ORDER BY "display_order" ASC, "name" ASC
`

func (q *Queries) ListCategories(ctx context.Context, db DBTX) ([]Category, error) {
	rows, err := db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.DisplayOrder,
			&i.ArticleCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE "categories"
SET
    "name" = $1,
    "slug" = $2,
    "description" = $3,
    "display_order" = $4,
    "updated_at" = CURRENT_TIMESTAMP
WHERE "id" = $5
RETURNING id, name, slug, description, display_order, article_count, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name         string         `json:"name"`
	Slug         string         `json:"slug"`
	Description  sql.NullString `json:"description"`
	DisplayOrder sql.NullInt32  `json:"display_order"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, db DBTX, arg UpdateCategoryParams) (Category, error) {
	row := db.QueryRowContext(ctx, updateCategory,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.DisplayOrder,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.DisplayOrder,
		&i.ArticleCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCategoryArticleCount = `-- name: UpdateCategoryArticleCount :exec
UPDATE "categories"
SET
    "article_count" = $1,
    "updated_at" = CURRENT_TIMESTAMP
WHERE "id" = $2
`

type UpdateCategoryArticleCountParams struct {
	ArticleCount sql.NullInt32 `json:"article_count"`
	ID           uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateCategoryArticleCount(ctx context.Context, db DBTX, arg UpdateCategoryArticleCountParams) error {
	_, err := db.ExecContext(ctx, updateCategoryArticleCount, arg.ArticleCount, arg.ID)
	return err
}
