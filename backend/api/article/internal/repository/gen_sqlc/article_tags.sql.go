// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: article_tags.sql

package gen_sqlc

import (
	"context"

	"github.com/google/uuid"
)

const addArticleTag = `-- name: AddArticleTag :exec
INSERT INTO "article_tags" (
    "article_id",
    "tag_id"
) VALUES (
    $1,
    $2
) ON CONFLICT ("article_id", "tag_id") DO NOTHING
`

type AddArticleTagParams struct {
	ArticleID uuid.UUID `json:"article_id"`
	TagID     uuid.UUID `json:"tag_id"`
}

func (q *Queries) AddArticleTag(ctx context.Context, db DBTX, arg AddArticleTagParams) error {
	_, err := db.ExecContext(ctx, addArticleTag, arg.ArticleID, arg.TagID)
	return err
}

const addArticleTagBulk = `-- name: AddArticleTagBulk :exec
INSERT INTO "article_tags" (
    "article_id",
    "tag_id"
) VALUES (
    $1,
    $2
) ON CONFLICT ("article_id", "tag_id") DO NOTHING
`

type AddArticleTagBulkParams struct {
	ArticleID uuid.UUID `json:"article_id"`
	TagID     uuid.UUID `json:"tag_id"`
}

func (q *Queries) AddArticleTagBulk(ctx context.Context, db DBTX, arg AddArticleTagBulkParams) error {
	_, err := db.ExecContext(ctx, addArticleTagBulk, arg.ArticleID, arg.TagID)
	return err
}

const checkArticleHasTag = `-- name: CheckArticleHasTag :one
SELECT EXISTS(
    SELECT 1 FROM "article_tags"
    WHERE "article_id" = $1 AND "tag_id" = $2
)
`

type CheckArticleHasTagParams struct {
	ArticleID uuid.UUID `json:"article_id"`
	TagID     uuid.UUID `json:"tag_id"`
}

func (q *Queries) CheckArticleHasTag(ctx context.Context, db DBTX, arg CheckArticleHasTagParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkArticleHasTag, arg.ArticleID, arg.TagID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countArticlesByTagID = `-- name: CountArticlesByTagID :one
SELECT COUNT(*) FROM "articles" "a"
INNER JOIN "article_tags" "at" ON "a"."id" = "at"."article_id"
WHERE "at"."tag_id" = $1 AND "a"."status" = 'published'
`

func (q *Queries) CountArticlesByTagID(ctx context.Context, db DBTX, tagID uuid.UUID) (int64, error) {
	row := db.QueryRowContext(ctx, countArticlesByTagID, tagID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listArticleIDsByTagID = `-- name: ListArticleIDsByTagID :many
SELECT "article_id" FROM "article_tags"
WHERE "tag_id" = $1
`

func (q *Queries) ListArticleIDsByTagID(ctx context.Context, db DBTX, tagID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := db.QueryContext(ctx, listArticleIDsByTagID, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var article_id uuid.UUID
		if err := rows.Scan(&article_id); err != nil {
			return nil, err
		}
		items = append(items, article_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticlesByTagID = `-- name: ListArticlesByTagID :many
SELECT a.id, a.title, a.content, a.slug, a.summary, a.status, a.category_id, a.view_count, a.published_at, a.created_at, a.updated_at FROM "articles" "a"
INNER JOIN "article_tags" "at" ON "a"."id" = "at"."article_id"
WHERE "at"."tag_id" = $1 AND "a"."status" = 'published'
ORDER BY "a"."published_at" DESC
LIMIT $3 OFFSET $2
`

type ListArticlesByTagIDParams struct {
	TagID  uuid.UUID `json:"tag_id"`
	Offset int32     `json:"offset"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) ListArticlesByTagID(ctx context.Context, db DBTX, arg ListArticlesByTagIDParams) ([]Article, error) {
	rows, err := db.QueryContext(ctx, listArticlesByTagID, arg.TagID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Slug,
			&i.Summary,
			&i.Status,
			&i.CategoryID,
			&i.ViewCount,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsByArticleID = `-- name: ListTagsByArticleID :many
SELECT t.id, t.name, t.slug, t.usage_count, t.created_at, t.updated_at FROM "tags" "t"
INNER JOIN "article_tags" "at" ON "t"."id" = "at"."tag_id"
WHERE "at"."article_id" = $1
ORDER BY "t"."name" ASC
`

func (q *Queries) ListTagsByArticleID(ctx context.Context, db DBTX, articleID uuid.UUID) ([]Tag, error) {
	rows, err := db.QueryContext(ctx, listTagsByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.UsageCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllArticleTags = `-- name: RemoveAllArticleTags :exec
DELETE FROM "article_tags"
WHERE "article_id" = $1
`

func (q *Queries) RemoveAllArticleTags(ctx context.Context, db DBTX, articleID uuid.UUID) error {
	_, err := db.ExecContext(ctx, removeAllArticleTags, articleID)
	return err
}

const removeArticleTag = `-- name: RemoveArticleTag :exec
DELETE FROM "article_tags"
WHERE "article_id" = $1 AND "tag_id" = $2
`

type RemoveArticleTagParams struct {
	ArticleID uuid.UUID `json:"article_id"`
	TagID     uuid.UUID `json:"tag_id"`
}

func (q *Queries) RemoveArticleTag(ctx context.Context, db DBTX, arg RemoveArticleTagParams) error {
	_, err := db.ExecContext(ctx, removeArticleTag, arg.ArticleID, arg.TagID)
	return err
}
