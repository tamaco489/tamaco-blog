name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yaml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/api/article

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "backend/api/article/go.mod"
          cache-dependency-path: "backend/api/article/go.sum"

      - name: Download dependencies
        run: go mod download

      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Check formatting
        run: |
          goimports -d .
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted"
            echo "Run 'make fmt' to fix formatting issues"
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          working-directory: ./backend/api/article

  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/api/article

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "backend/api/article/go.mod"
          cache-dependency-path: "backend/api/article/go.sum"

      - name: Download dependencies
        run: go mod download

      - name: Build application
        run: go build -v -o build/article_api ./cmd

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/api/article

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "backend/api/article/go.mod"
          cache-dependency-path: "backend/api/article/go.sum"

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -cover ./... || echo "No tests found yet"

      - name: Check go mod tidy
        run: |
          go mod tidy
          if [ -f go.sum ]; then
            git diff --exit-code go.mod go.sum
          else
            git diff --exit-code go.mod
          fi

  security:
    name: Security Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/api/article

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "backend/api/article/go.mod"
          cache-dependency-path: "backend/api/article/go.sum"

      - name: Download dependencies
        run: go mod download

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  sqlc-lint:
    name: SQLC Static Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/api/article

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "backend/api/article/go.mod"
          cache-dependency-path: "backend/api/article/go.sum"

      - name: Cache sqlc binary
        uses: actions/cache@v4
        id: sqlc-cache
        with:
          path: ~/go/bin/sqlc
          key: sqlc-${{ runner.os }}-${{ hashFiles('backend/api/article/go.mod') }}
          restore-keys: |
            sqlc-${{ runner.os }}-

      - name: Install sqlc
        if: steps.sqlc-cache.outputs.cache-hit != 'true'
        run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

      - name: Run sqlc static analysis
        run: make sqlc-lint

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, build, test, security, sqlc-lint]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" &&
                "${{ needs.build.result }}" == "success" &&
                "${{ needs.test.result }}" == "success" &&
                "${{ needs.security.result }}" == "success" &&
                "${{ needs.sqlc-lint.result }}" == "success" ]]; then
            echo "✅ All Backend CI checks passed!"
          else
            echo "❌ Some Backend CI checks failed"
            echo "Lint and Format: ${{ needs.lint-and-format.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Security: ${{ needs.security.result }}"
            echo "SQLC Lint: ${{ needs.sqlc-lint.result }}"
            exit 1
          fi
